<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphQL</name>
    </assembly>
    <members>
        <member name="T:GraphQL.BoolBox">
            <summary> Boolean values to avoid boxing. </summary>
        </member>
        <member name="F:GraphQL.BoolBox.True">
            <summary>
            Shared field for 'true' value.
            </summary>
        </member>
        <member name="F:GraphQL.BoolBox.False">
            <summary>
            Shared field for 'false' value.
            </summary>
        </member>
        <member name="M:GraphQL.BoolBox.Boxed(System.Boolean)">
            <summary> This method avoids boxing boolean values. </summary>
            <param name="value"> Original boolean value. </param>
            <returns> Shared static boxed boolean value. </returns>
        </member>
        <member name="M:GraphQL.BoolBox.Boxed(System.Nullable{System.Boolean})">
            <summary> This method avoids boxing boolean values. </summary>
            <param name="value"> Original boolean value. </param>
            <returns> Shared static boxed boolean value or <c>null</c>. </returns>
        </member>
        <member name="T:GraphQL.Builders.ConnectionBuilder">
            <summary>
            Static methods to create connection field builders.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder.Create``2">
            <summary>
            Returns a builder for new connection field for the specified node type.
            The edge type is <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;&gt;.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder.Create``3">
            <summary>
            Returns a builder for new connection field for the specified node and edge type.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder.Create``4">
            <summary>
            Returns a builder for new connection field for the specified node, edge and connection type.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
            <typeparam name="TConnectionType">The graph type of the connection. Must derive from <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;.</typeparam>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
        </member>
        <member name="T:GraphQL.Builders.ConnectionBuilder`1">
            <summary>
            Builds a connection field for graphs that have the specified source type.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.ConnectionBuilder`1.FieldType">
            <summary>
            Returns the generated field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Create``1(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node type.
            The edge type is <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;&gt;.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Create``2(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node and edge type.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Create``3(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node, edge and connection type.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
            <typeparam name="TConnectionType">The graph type of the connection. Must derive from <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Unidirectional">
            <summary>
            Configure the connection to be forward-only.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Bidirectional">
            <summary>
            Configure the connection to be bi-directional.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Name(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Name(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Description(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Description(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.DeprecationReason(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.DeprecationReason(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.PageSize(System.Int32)">
            <summary>
            Sets the default page size.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.ReturnAll">
            <summary>
            Clears the default page size, so all records are returned by default.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Argument``1(System.String,System.String)">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Argument``2(System.String,System.String,``1)">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <typeparam name="TArgumentType">The type of the argument value.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Resolve(System.Func{GraphQL.Builders.IResolveConnectionContext{`0},System.Object})">
            <summary>
            Sets the resolver method for the connection field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.ResolveAsync(System.Func{GraphQL.Builders.IResolveConnectionContext{`0},System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Sets the resolver method for the connection field.
            </summary>
        </member>
        <member name="T:GraphQL.Builders.FieldBuilder">
            <summary>
            Static methods to create field builders.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder.Create``2(System.Type)">
            <summary>
            Returns a builder for a new field with a specified source type, return type and graph type.
            </summary>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
            <typeparam name="TReturnType">The type of the return value of the resolver.</typeparam>
            <param name="type">The graph type of the field.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder.Create``2(GraphQL.Types.IGraphType)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder.Create``2(System.Type)"/>
        </member>
        <member name="T:GraphQL.Builders.FieldBuilder`2">
            <summary>
            Builds a field for a graph with a specified source type and return type.
            </summary>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
            <typeparam name="TReturnType">The type of the return value of the resolver.</typeparam>
        </member>
        <member name="P:GraphQL.Builders.FieldBuilder`2.FieldType">
            <summary>
            Returns the generated field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Create(GraphQL.Types.IGraphType,System.String)">
            <summary>
            Returns a builder for a new field.
            </summary>
            <param name="type">The graph type of the field.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Create(System.Type,System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Create(GraphQL.Types.IGraphType,System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Type(GraphQL.Types.IGraphType)">
            <summary>
            Sets the graph type of the field.
            </summary>
            <param name="type">The graph type of the field.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Name(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Description(System.String)">
            <summary>
            Sets the description of the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.DeprecationReason(System.String)">
            <summary>
            Sets the deprecation reason of the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.DefaultValue(`1)">
            <summary>
            Sets the default value of fields on input object graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)">
            <summary>
            Sets the resolver for the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Resolve(System.Func{GraphQL.IResolveFieldContext{`0},`1})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.ResolveAsync(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{`1}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Returns``1">
            <summary>
            Sets the return type of the field.
            </summary>
            <typeparam name="TNewReturnType">The type of the return value of the resolver.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``1(System.String,System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``2(System.String,System.String,``1,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <typeparam name="TArgumentType">The type of the argument value.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``1(System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Configure(System.Action{GraphQL.Types.FieldType})">
            <summary>
            Runs a configuration delegate for the field.
            </summary>
        </member>
        <member name="T:GraphQL.Builders.IResolveConnectionContext">
            <summary>
            Contains parameters pertaining to the currently executing <see cref="T:GraphQL.Resolvers.IFieldResolver"/>, along
            with helper properties for resolving forward and backward pagination requests on a
            connection type.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.IsUnidirectional">
            <summary>
            Indicates if this connection only allows forward pagination requests.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.First">
            <summary>
            For a forward pagination request, returns the maximum number of edges to be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.Last">
            <summary>
            For a backwards pagination request, returns the maximum number of edges to be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.After">
            <summary>
            For a forward pagination request, returned edges should start immediately after the edge identified by this cursor.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.Before">
            <summary>
            For a backwards pagination request, returned edges should end immediately prior to the edge identified by this cursor.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.PageSize">
            <summary>
            The maximum number of edges to be returned, or the specified default page size if <see cref="P:GraphQL.Builders.IResolveConnectionContext.First"/> and
            <see cref="P:GraphQL.Builders.IResolveConnectionContext.Last"/> are not specified.
            </summary>
        </member>
        <member name="T:GraphQL.Builders.IResolveConnectionContext`1">
            <inheritdoc cref="T:GraphQL.Builders.IResolveConnectionContext"/>
        </member>
        <member name="T:GraphQL.Builders.ResolveConnectionContext`1">
            <summary>
            A mutable implementation of <see cref="T:GraphQL.Builders.IResolveConnectionContext`1"/>
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ResolveConnectionContext`1.#ctor(GraphQL.IResolveFieldContext,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance which mirrors the specified <see cref="T:GraphQL.IResolveFieldContext"/>
            with the specified properties and defaults
            </summary>
            <param name="context">The underlying <see cref="T:GraphQL.IResolveFieldContext"/> to mirror</param>
            <param name="isUnidirectional">Indicates if the connection only allows forward paging requests</param>
            <param name="defaultPageSize">Indicates the default page size if not specified by the request</param>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.IsUnidirectional">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.First">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.Last">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.After">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.Before">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.PageSize">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Conversion.CamelCaseNameConverter">
            <summary>
            Camel case name converter; set as the default <see cref="T:GraphQL.Conversion.INameConverter"/> within <see cref="P:GraphQL.ExecutionOptions.NameConverter"/>.
            Always used by all introspection fields regardless of the selected <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="F:GraphQL.Conversion.CamelCaseNameConverter.Instance">
            <summary>
            Static instance of <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/> that can be reused instead of creating new.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.CamelCaseNameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Returns the field name converted to camelCase.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.CamelCaseNameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Returns the argument name converted to camelCase.
            </summary>
        </member>
        <member name="T:GraphQL.Conversion.DefaultNameConverter">
            <summary>
            A name converter which does not modify the names passed to it.
            </summary>
        </member>
        <member name="F:GraphQL.Conversion.DefaultNameConverter.Instance">
            <summary>
            Static instance of <see cref="T:GraphQL.Conversion.DefaultNameConverter"/> that can be reused instead of creating new.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.DefaultNameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Returns the field name without modification
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.DefaultNameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Returns the argument name without modification
            </summary>
        </member>
        <member name="T:GraphQL.Conversion.INameConverter">
            <summary>
            Sanitizes graph field and argument names to a particular case convention, such as camelСase or PascalCase.<br/>
            <br/>
            Set <see cref="P:GraphQL.ExecutionOptions.NameConverter"/> to an instance of a derived class to select a converter to use.
            The default converter is <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/>.<br/>
            <br/>
            Introspection fields always use <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/> regardless of the selected <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.INameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Sanitizes a field name for a specified parent graph type; returns the updated field name
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.INameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Sanitizes an argument name for a specified parent graph type and field definition; returns the updated field name
            </summary>
        </member>
        <member name="T:GraphQL.Conversion.PascalCaseNameConverter">
            <summary>
            PascalCase name converter.
            </summary>
        </member>
        <member name="F:GraphQL.Conversion.PascalCaseNameConverter.Instance">
            <summary>
            Static instance of <see cref="T:GraphQL.Conversion.PascalCaseNameConverter"/> that can be reused instead of creating new.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.PascalCaseNameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Returns the field name converted to PascalCase.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.PascalCaseNameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Returns the argument name converted to PascalCase.
            </summary>
        </member>
        <member name="T:GraphQL.ValueConverter">
            <summary>
            This class provides value conversions between objects of different types.
            Conversions are registered in a static thread safe dictionary and are used for all schemas in the application.
            <br/><br/>
            Each ScalarGraphType calls <see cref="M:GraphQL.ValueConverter.ConvertTo(System.Object,System.Type)">ConvertTo</see> method to return correct value
            type from its <see cref="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)">ParseValue</see> method.
            Also conversions may be useful in advanced <see cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">GetArgument</see>
            use cases when deserialization from the values dictionary to the complex input argument is required.
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.#cctor">
            <summary>
            Register built-in conversions. This list is expected to grow over time.
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.ConvertTo``1(System.Object)">
            <summary>
            <para>Returns an object of the specified type and whose value is equivalent to the specified object.</para>
            <para>Throws a <see cref="T:System.InvalidOperationException"/> if there is no conversion registered; conversion functions may throw other exceptions</para>
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            <para>Returns an object of the specified type and whose value is equivalent to the specified object.</para>
            <para>Throws a <see cref="T:System.InvalidOperationException"/> if there is no conversion registered; conversion functions may throw other exceptions</para>
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.TryConvertTo(System.Object,System.Type,System.Object@,System.Type)">
            <summary>
            <para>If a conversion delegate was registered, converts an object to the specified type and returns <c>true</c>; returns <c>false</c> if no conversion delegate is registered.</para>
            <para>Conversion delegates may throw exceptions if the conversion was unsuccessful</para>
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.Register(System.Type,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Allows you to register your own conversion delegate from one type to another.
            <br/><br/>
            If the conversion from valueType to targetType is already registered, then it will be overwritten.
            </summary>
            <param name="valueType">Type of original value.</param>
            <param name="targetType">Converted value type.</param>
            <param name="conversion">Conversion delegate; <c>null</c> for unregister already registered conversion.</param>
        </member>
        <member name="M:GraphQL.ValueConverter.Register``2(System.Func{``0,``1})">
            <summary>
            Allows you to register your own conversion delegate from one type to another.
            <br/><br/>
            If the conversion from TSource to TTarget is already registered, then it will be overwritten.
            </summary>
            <typeparam name="TSource">Type of original value.</typeparam>
            <typeparam name="TTarget">Converted value type.</typeparam>
            <param name="conversion">Conversion delegate; <c>null</c> for unregister already registered conversion.</param>
        </member>
        <member name="M:GraphQL.ValueConverter.Register``1(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},``0})">
            <summary>
            Allows you to register your own conversion delegate from dictionary to some complex object.
            <br/><br/>
            This method may be useful in advanced <see cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">GetArgument</see>
            use cases when deserialization from the values dictionary to the complex input argument is required.
            <br/><br/>
            If the conversion from dictionary to TTarget is already registered, then it will be overwritten.
            </summary>
            <typeparam name="TTarget">Converted value type.</typeparam>
            <param name="conversion">Conversion delegate; <c>null</c> for unregister already registered conversion.</param>
        </member>
        <member name="T:GraphQL.DataLoader.BatchDataLoader`2">
            <summary>
            A data loader that returns a single value for each given unique key
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="T">The type of the return value</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.BatchDataLoader`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{`0,`1}}},System.Collections.Generic.IEqualityComparer{`0},`1,System.Int32)">
            <summary>
            Initializes a new instance of BatchDataLoader with the specified fetch delegate
            </summary>
            <param name="fetchDelegate">An asynchronous delegate that is passed a list of keys and cancellation token, which returns a dictionary of keys and values</param>
            <param name="keyComparer">An optional equality comparer for the keys</param>
            <param name="defaultValue">The value returned when no match is found in the dictionary, or default(T) if unspecified</param>
            <param name="maxBatchSize">The maximum number of keys passed to the fetch delegate at a time</param>
        </member>
        <member name="M:GraphQL.DataLoader.BatchDataLoader`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0},`1,System.Int32)">
            <summary>
            Initializes a new instance of BatchDataLoader with the specified fetch delegate and key selector
            </summary>
            <param name="fetchDelegate">An asynchronous delegate that is passed a list of keys and a cancellation token, which returns a list objects</param>
            <param name="keySelector">A selector for the key from the returned object</param>
            <param name="keyComparer">An optional equality comparer for the keys</param>
            <param name="defaultValue">The value returned when no match is found in the list, or default(T) if unspecified</param>
            <param name="maxBatchSize">The maximum number of keys passed to the fetch delegate at a time</param>
        </member>
        <member name="M:GraphQL.DataLoader.BatchDataLoader`2.FetchAsync(System.Collections.Generic.IEnumerable{GraphQL.DataLoader.DataLoaderPair{`0,`1}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.DataLoader.CollectionBatchDataLoader`2">
            <summary>
            A data loader that returns a list of values for each given unique key
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="T">The type of the return value</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.CollectionBatchDataLoader`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Linq.ILookup{`0,`1}}},System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of CollectionBatchDataLoader with the specified fetch delegate
            </summary>
            <param name="fetchDelegate">An asynchronous delegate that is passed a list of keys and cancellation token, which returns an ILookup of keys and values</param>
            <param name="keyComparer">An optional equality comparer for the keys</param>
            <param name="maxBatchSize">The maximum number of keys passed to the fetch delegate at a time</param>
        </member>
        <member name="M:GraphQL.DataLoader.CollectionBatchDataLoader`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of CollectionBatchDataLoader with the specified fetch delegate and key selector
            </summary>
            <param name="fetchDelegate">An asynchronous delegate that is passed a list of keys and a cancellation token, which returns a list objects</param>
            <param name="keySelector">A selector for the key from the returned object</param>
            <param name="keyComparer">An optional equality comparer for the keys</param>
            <param name="maxBatchSize">The maximum number of keys passed to the fetch delegate at a time</param>
        </member>
        <member name="M:GraphQL.DataLoader.CollectionBatchDataLoader`2.FetchAsync(System.Collections.Generic.IEnumerable{GraphQL.DataLoader.DataLoaderPair{`0,System.Collections.Generic.IEnumerable{`1}}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderBase`2">
            <summary>
            An abstract class for data loaders that accept a key and return a value, with optional caching of keys with values.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="T">The type of the value</typeparam>
            <remarks>This class is thread safe.</remarks>
        </member>
        <member name="F:GraphQL.DataLoader.DataLoaderBase`2.MaxBatchSize">
            <summary>
            Returns the maximum number of keys passed to the fetch function at a time.
            </summary>
        </member>
        <member name="F:GraphQL.DataLoader.DataLoaderBase`2.EqualityComparer">
            <summary>
            Returns the equality comparer to be used, or null for the default equality comparer.
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.#ctor">
            <summary>
            Initialize a DataLoaderBase with caching enabled and the default equality comparer
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.#ctor(System.Boolean)">
            <summary>
            Initialize a DataLoaderBase with the specified options
            </summary>
            <param name="caching">Indicates if responses should be cached</param>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initialize a DataLoaderBase with the specified options
            </summary>
            <param name="caching">Indicates if responses should be cached</param>
            <param name="maxBatchSize">The maximum number of keys passed to the fetch function at a time</param>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize a DataLoaderBase with caching enabled and the specified equality comparer
            </summary>
            <param name="equalityComparer">Specifies the equality comparer to be used, or null for the default equality comparer</param>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initialize a DataLoaderBase with caching enabled and the specified options
            </summary>
            <param name="equalityComparer">Specifies the equality comparer to be used, or null for the default equality comparer</param>
            <param name="maxBatchSize">The maximum number of keys passed to the fetch function at a time</param>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initialize a DataLoaderBase with the specified options
            </summary>
            <param name="caching">Indicates if responses should be cached</param>
            <param name="equalityComparer">Specifies the equality comparer to be used, or null for the default equality comparer</param>
            <param name="maxBatchSize">The maximum number of keys passed to the fetch function at a time</param>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.LoadAsync(`0)">
            <summary>
            Asynchronously load data for the provided given key
            </summary>
            <param name="key">Key to use for loading data</param>
            <returns>
            An object representing a pending operation
            </returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.FetchAsync(System.Collections.Generic.IEnumerable{GraphQL.DataLoader.DataLoaderPair{`0,`1}},System.Threading.CancellationToken)">
            <summary>
            An abstract asynchronous function to load the values for a given list of keys
            </summary>
            <remarks>
            This may be called on multiple threads if IDataLoader.LoadAsync is called on multiple threads.
            It will never be called for the same list of items.
            </remarks>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.StartLoading(GraphQL.DataLoader.DataLoaderBase{`0,`1}.DataLoaderList,System.Threading.CancellationToken)">
            <summary>
            Internally used by DataLoaderList to start the fetch operation
            </summary>
            <returns>A Task representing the asynchronous fetch operation</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderBase`2.DispatchAsync(System.Threading.CancellationToken)">
            <summary>
            Dispatch any pending operations
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to the fetch delegate</param>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderContext">
            <summary>
            Provides a way to register DataLoader instances
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContext.GetOrAdd``1(System.String,System.Func{``0})">
            <summary>
            Add a new data loader if one does not already exist with the provided key
            </summary>
            <typeparam name="TDataLoader">The type of <seealso cref="T:GraphQL.DataLoader.IDataLoader"/></typeparam>
            <param name="loaderKey">Unique string to identify the <seealso cref="T:GraphQL.DataLoader.IDataLoader"/> instance</param>
            <param name="dataLoaderFactory">Function to create the TDataLoader instance if it does not already exist</param>
            <returns>Returns an existing TDataLoader instance or a newly created instance if it did not exist already</returns>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderContextAccessor">
            <inheritdoc cref="T:GraphQL.DataLoader.IDataLoaderContextAccessor"/>
        </member>
        <member name="P:GraphQL.DataLoader.DataLoaderContextAccessor.Context">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderContextExtensions">
            <summary>
            Provides extension methods for retrieving <see cref="T:GraphQL.DataLoader.IDataLoader"/> implementations via a <see cref="T:GraphQL.DataLoader.DataLoaderContext"/>
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.WrapNonCancellableFunc``1(System.Func{``0})">
            <summary>
            Returns a delegate which calls the delegate passed to this method, stripping off the <see cref="T:System.Threading.CancellationToken"/> in the process.
            </summary>
            <typeparam name="TResult">The type of the return value of the delegate.</typeparam>
            <param name="func">The delegate to call.</param>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.WrapNonCancellableFunc``2(System.Func{``0,``1})">
            <summary>
            Returns a delegate which calls the delegate passed to this method, stripping off the <see cref="T:System.Threading.CancellationToken"/> in the process.
            </summary>
            <typeparam name="T">The type of the argument of the delegate.</typeparam>
            <typeparam name="TResult">The type of the return value of the delegate.</typeparam>
            <param name="func">The delegate to call.</param>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddLoader``1(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Get or add a DataLoader instance for caching data fetching operations.
            </summary>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A cancellable delegate to fetch data asynchronously</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddLoader``1(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Get or add a DataLoader instance for caching data fetching operations.
            </summary>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A delegate to fetch data asynchronously</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{``0,``1}}},System.Collections.Generic.IEqualityComparer{``0},``1)">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A cancellable delegate to fetch data for some keys asynchronously</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="defaultValue">The value returned when no match is found in the dictionary, or default(T) if unspecified</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.Task{System.Collections.Generic.IDictionary{``0,``1}}},System.Collections.Generic.IEqualityComparer{``0},``1)">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A delegate to fetch data for some keys asynchronously</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="defaultValue">The value returned when no match is found in the dictionary, or default(T) if unspecified</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``1}}},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0},``1)">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc"></param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="defaultValue">The value returned when no match is found in the list, or default(T) if unspecified</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``1}}},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0},``1)">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A delegate to fetch data for some keys asynchronously</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <param name="defaultValue">The value returned when no match is found in the list, or default(T) if unspecified</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddCollectionBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Linq.ILookup{``0,``1}}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A cancellable delegate to fetch data for some keys asynchronously</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddCollectionBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.Task{System.Linq.ILookup{``0,``1}}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A delegate to fetch data for some keys asynchronously</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddCollectionBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``1}}},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A cancellable delegate to fetch data for some keys asynchronously</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderContextExtensions.GetOrAddCollectionBatchLoader``2(GraphQL.DataLoader.DataLoaderContext,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``1}}},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get or add a DataLoader instance for batching data fetching operations.
            </summary>
            <typeparam name="TKey">The type of key used to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
            <param name="context">The <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/> to get or add a DataLoader to</param>
            <param name="loaderKey">A unique key to identify the DataLoader instance</param>
            <param name="fetchFunc">A delegate to fetch data for some keys asynchronously</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="keyComparer">An <seealso cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>A new or existing DataLoader instance</returns>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderDocumentListener">
            <summary>
            Used to manage the <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/>
            and automatically dispatch data loader operations at each execution step.
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderDocumentListener.#ctor(GraphQL.DataLoader.IDataLoaderContextAccessor)">
            <summary>
            Constructs a <see cref="T:GraphQL.DataLoader.DataLoaderDocumentListener"/> with the specified <see cref="T:GraphQL.DataLoader.IDataLoaderContextAccessor"/>
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderDocumentListener.AfterValidationAsync(GraphQL.Execution.IExecutionContext,GraphQL.Validation.IValidationResult)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderDocumentListener.BeforeExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderDocumentListener.BeforeExecutionAwaitedAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderDocumentListener.AfterExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderDocumentListener.BeforeExecutionStepAwaitedAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderExtensions">
            <summary>
            Provides extension methods useful for data loaders
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.LoadAsync``2(GraphQL.DataLoader.IDataLoader{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asynchronously load data for the provided given keys
            </summary>
            <param name="dataLoader">The dataloader to use</param>
            <param name="keys">Keys to use for loading data</param>
            <returns>
            A task that will complete when the DataLoader has been dispatched,
            or a completed task if the result is already cached.
            </returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.LoadAsync``2(GraphQL.DataLoader.IDataLoader{``0,``1},``0[])">
            <summary>
            Asynchronously load data for the provided given keys
            </summary>
            <param name="dataLoader">The dataloader to use</param>
            <param name="keys">Keys to use for loading data</param>
            <returns>
            A task that will complete when the DataLoader has been dispatched,
            or a completed task if the results are already cached.
            </returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.Then``2(GraphQL.DataLoader.IDataLoaderResult{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
            Chains post-processing to a pending data loader operation
            </summary>
            <typeparam name="T">The type of the data loader return value</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="parent">The pending data loader operation</param>
            <param name="chainedDelegate">The delegate to execute once the data loader finishes loading</param>
            <returns>A pending data loader operation that can return a value once the data loader and the chained delegate finish</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.Then``2(GraphQL.DataLoader.IDataLoaderResult{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Chains post-processing to a pending data loader operation
            </summary>
            <typeparam name="T">The type of the data loader return value</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="parent">The pending data loader operation</param>
            <param name="chainedDelegate">The delegate to execute once the data loader finishes loading</param>
            <returns>A pending data loader operation that can return a value once the data loader and the chained delegate finish</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.Then``2(GraphQL.DataLoader.IDataLoaderResult{``0},System.Func{``0,``1})">
            <summary>
            Chains post-processing to a pending data loader operation
            </summary>
            <typeparam name="T">The type of the data loader return value</typeparam>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="parent">The pending data loader operation</param>
            <param name="chainedDelegate">The delegate to execute once the data loader finishes loading</param>
            <returns>A pending data loader operation that can return a value once the data loader and the chained delegate finish</returns>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.ResolveAsync``2(GraphQL.Builders.FieldBuilder{``0,``1},System.Func{GraphQL.IResolveFieldContext{``0},GraphQL.DataLoader.IDataLoaderResult{``1}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.ResolveAsync``2(GraphQL.Builders.FieldBuilder{``0,``1},System.Func{GraphQL.IResolveFieldContext{``0},System.Threading.Tasks.Task{GraphQL.DataLoader.IDataLoaderResult{``1}}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.ResolveAsync``2(GraphQL.Builders.FieldBuilder{``0,``1},System.Func{GraphQL.IResolveFieldContext{``0},GraphQL.DataLoader.IDataLoaderResult{GraphQL.DataLoader.IDataLoaderResult{``1}}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.ResolveAsync``2(GraphQL.Builders.FieldBuilder{``0,``1},System.Func{GraphQL.IResolveFieldContext{``0},System.Threading.Tasks.Task{GraphQL.DataLoader.IDataLoaderResult{GraphQL.DataLoader.IDataLoaderResult{``1}}}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.ResolveAsync``2(GraphQL.Builders.FieldBuilder{``0,``1},System.Func{GraphQL.IResolveFieldContext{``0},GraphQL.DataLoader.IDataLoaderResult{GraphQL.DataLoader.IDataLoaderResult{GraphQL.DataLoader.IDataLoaderResult{``1}}}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderExtensions.ResolveAsync``2(GraphQL.Builders.FieldBuilder{``0,``1},System.Func{GraphQL.IResolveFieldContext{``0},System.Threading.Tasks.Task{GraphQL.DataLoader.IDataLoaderResult{GraphQL.DataLoader.IDataLoaderResult{GraphQL.DataLoader.IDataLoaderResult{``1}}}}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderPair`2">
            <summary>
            An implementation of an IDataLoaderResult that calls IDataLoader.DispatchAsync when its result is requested
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="T">The type of the return value</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderPair`2.#ctor(GraphQL.DataLoader.IDataLoader,`0)">
            <summary>
            Initialize an instance of DataLoaderPair with the specified data loader and key
            </summary>
        </member>
        <member name="P:GraphQL.DataLoader.DataLoaderPair`2.Key">
            <summary>
            Returns the key that is passed to the data loader's fetch delegate
            </summary>
        </member>
        <member name="P:GraphQL.DataLoader.DataLoaderPair`2.Loader">
            <summary>
            Returns the data loader that is called when the result is requested
            </summary>
        </member>
        <member name="P:GraphQL.DataLoader.DataLoaderPair`2.Result">
            <summary>
            Returns the result if it has been set, or default(T) if not
            </summary>
        </member>
        <member name="P:GraphQL.DataLoader.DataLoaderPair`2.IsResultSet">
            <summary>
            Returns a boolean that indicates if the result has been set
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderPair`2.SetResult(`1)">
            <summary>
            Sets the result if it has not yet been set
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws when the result has already been set</exception>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderPair`2.GetResultAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the loader if it has not yet been executed; then returns the result
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="T:GraphQL.DataLoader.DataLoaderResult`1">
            <summary>
            Represents a pending operation that can return a value
            </summary>
            <typeparam name="T">The type of value that is returned</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderResult`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a DataLoaderResult with the given asynchronous task
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderResult`1.#ctor(`0)">
            <summary>
            Initializes a DataLoaderResult with the given value
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.DataLoaderResult`1.GetResultAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the loader if it has not yet been executed; then returns the result
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoader">
            <summary>
            Provides a method to dispatch a pending operation to load data.
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.IDataLoader.DispatchAsync(System.Threading.CancellationToken)">
            <summary>
            Dispatch any pending operations
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to the fetch delegate</param>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoader`1">
            <summary>
            Provides a method of queuing a data loading operation to be dispatched later.
            </summary>
            <typeparam name="T">The type of data to be loaded</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.IDataLoader`1.LoadAsync">
            <summary>
            Asynchronously load data
            </summary>
            <returns>
            An object representing a pending operation.
            </returns>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoader`2">
            <summary>
            Provides a method of queueing a data loading operation to be dispatched later.
            </summary>
            <typeparam name="TKey">The type of key to use to load data</typeparam>
            <typeparam name="T">The type of data to be loaded</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.IDataLoader`2.LoadAsync(`0)">
            <summary>
            Asynchronously load data for the provided given key
            </summary>
            <param name="key">Key to use for loading data</param>
            <returns>
            An object representing a pending operation
            </returns>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoaderContextAccessor">
            <summary>
            Provides access to a <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/>
            </summary>
        </member>
        <member name="P:GraphQL.DataLoader.IDataLoaderContextAccessor.Context">
            <summary>
            The current <seealso cref="T:GraphQL.DataLoader.DataLoaderContext"/>
            </summary>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoaderResult`1">
            <summary>
            Represents a pending operation that can return a value
            </summary>
            <typeparam name="T">The type of value that is returned</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.IDataLoaderResult`1.GetResultAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the loader if it has not yet been executed; then returns the result
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoaderResult">
            <summary>
            Represents a pending operation that can return a value
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.IDataLoaderResult.GetResultAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the loader if it has not yet been executed; then returns the result
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="T:GraphQL.DataLoader.SimpleDataLoader`1">
            <summary>
            Provides an IDataLoader that always returns the same data
            </summary>
            <typeparam name="T">The type of data that is returned</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.SimpleDataLoader`1.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new SimpleDataLoader with the given fetch delegate
            </summary>
            <param name="fetchDelegate">An asynchronous delegate that accepts a cancellation token and returns data</param>
        </member>
        <member name="M:GraphQL.DataLoader.SimpleDataLoader`1.DispatchAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the fetch delegate if it has not already been run
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="M:GraphQL.DataLoader.SimpleDataLoader`1.GetResultAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the fetch delegate if it has not already been run, then returns the data
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="M:GraphQL.DataLoader.SimpleDataLoader`1.LoadAsync">
            <summary>
            Asynchronously load data
            </summary>
            <returns>
            An object representing a pending operation.
            </returns>
        </member>
        <member name="T:GraphQL.DefaultServiceProvider">
            <summary>
            Activator.CreateInstance based service provider.
            </summary>
            <seealso cref="T:System.IServiceProvider" />
        </member>
        <member name="M:GraphQL.DefaultServiceProvider.GetService(System.Type)">
            <summary>
            Gets an instance of the specified type. Can not return null but may throw exception.
            </summary>
            <param name="serviceType">Desired type</param>
            <returns>An instance of <paramref name="serviceType"/>.</returns>
        </member>
        <member name="T:GraphQL.FuncServiceProvider">
            <summary>
            Func based service provider.
            </summary>
            <seealso cref="T:System.IServiceProvider" />
            <remarks>This is mainly used as an adapter for other service providers such as DI frameworks.</remarks>
        </member>
        <member name="M:GraphQL.FuncServiceProvider.#ctor(System.Func{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.FuncServiceProvider"/> class.
            </summary>
            <param name="resolver">The resolver function.</param>
        </member>
        <member name="M:GraphQL.FuncServiceProvider.GetService(System.Type)">
            <summary>
            Gets an instance of the specified type. May return null. Also you can use GetRequiredService extension method.
            </summary>
            <param name="type">Desired type</param>
        </member>
        <member name="T:GraphQL.DocumentWriterExtensions">
            <summary>
            Provides extension methods for document writers.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentWriterExtensions.WriteToStringAsync``1(GraphQL.IDocumentWriter,``0)">
            <summary>
            Writes the <paramref name="value"/> to string.
            </summary>
        </member>
        <member name="T:GraphQL.EnumerableExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:System.Collections.Generic.IEnumerable`1"/> lists.
            </summary>
        </member>
        <member name="M:GraphQL.EnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the indicated action on each item.
            </summary>
            <param name="items">The list of items to act on.</param>
            <param name="action">The action to be performed.</param>
            <remarks>If an exception occurs, the action will not be performed on the remaining items.</remarks>
        </member>
        <member name="M:GraphQL.EnumerableExtensions.Apply``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
            Performs the indicated action on each item. Boxing free for <c>List+Enumerator{T}</c>.
            </summary>
            <param name="items">The list of items to act on.</param>
            <param name="action">The action to be performed.</param>
            <remarks>If an exception occurs, the action will not be performed on the remaining items.</remarks>
        </member>
        <member name="M:GraphQL.EnumerableExtensions.Apply(System.Collections.IDictionary,System.Action{System.Object,System.Object})">
            <summary>
            Performs the indicated action on each key-value pair.
            </summary>
            <param name="items">The dictionary of items to act on.</param>
            <param name="action">The action to be performed.</param>
            <remarks>If an exception occurs, the action will not be performed on the remaining items.</remarks>
        </member>
        <member name="T:GraphQL.Execution.DocumentError">
            <summary>
            Represents an error generated while parsing or validating the document or its associated variables.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DocumentError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.DocumentError"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DocumentError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.DocumentError"/> class with a specified error message. Sets the
            <see cref="P:GraphQL.ExecutionError.Code">Code</see> property based on the inner exception. 
            Loads any exception data from the inner exception into this instance.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IDocumentExecutionListener">
            <summary>
            Provides the ability to log query validation failures and monitor progress of a GraphQL request's execution.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.AfterValidationAsync(GraphQL.Execution.IExecutionContext,GraphQL.Validation.IValidationResult)">
            <summary>Executes after document validation is complete. Can be used to log validation failures.</summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.BeforeExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <summary>Executes after document validation passes, before calling <see cref="M:GraphQL.Execution.IExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)"/>.</summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.BeforeExecutionAwaitedAsync(GraphQL.Execution.IExecutionContext)">
            <summary>Executes before the <see cref="T:GraphQL.IDocumentExecuter"/> awaits the <see cref="T:System.Threading.Tasks.Task"/> returned by <see cref="M:GraphQL.Execution.IExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)"/></summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.AfterExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <summary>Executes after the <see cref="T:GraphQL.Execution.IExecutionStrategy"/> has completed executing the request</summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.BeforeExecutionStepAwaitedAsync(GraphQL.Execution.IExecutionContext)">
            <summary>Executes before each time the <see cref="T:GraphQL.Execution.IExecutionStrategy"/> awaits the <see cref="T:System.Threading.Tasks.Task`1"/> returned by <see cref="M:GraphQL.Resolvers.IFieldResolver.Resolve(GraphQL.IResolveFieldContext)"/>. For parallel resolvers, this may execute a single time prior to awaiting multiple tasks.</summary>
        </member>
        <member name="T:GraphQL.Execution.DocumentExecutionListenerBase">
            <inheritdoc cref="T:GraphQL.Execution.IDocumentExecutionListener"/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.AfterValidationAsync(GraphQL.Execution.IExecutionContext,GraphQL.Validation.IValidationResult)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.BeforeExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.BeforeExecutionAwaitedAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.AfterExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.BeforeExecutionStepAwaitedAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.ErrorInfo">
            <summary>
            Represents the fields of a GraphQL error entry. See https://spec.graphql.org/June2018/#sec-Errors
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ErrorInfo.Message">
            <summary>
            A description of the error intended for the developer as a guide to understand and correct the error
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ErrorInfo.Extensions">
            <summary>
            This entry, if set, must have a map as its value. This entry is reserved for implementors to add additional
            information to errors however they see fit, and there are no additional restrictions on its contents.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ErrorInfoProvider">
            <inheritdoc cref="T:GraphQL.Execution.IErrorInfoProvider"/>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.#ctor">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ErrorInfoProvider"/> with a default set of <see cref="T:GraphQL.Execution.ErrorInfoProviderOptions"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.#ctor(GraphQL.Execution.ErrorInfoProviderOptions)">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ErrorInfoProvider"/> with a specified set of <see cref="T:GraphQL.Execution.ErrorInfoProviderOptions"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.#ctor(System.Action{GraphQL.Execution.ErrorInfoProviderOptions})">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ErrorInfoProvider"/> with a set of <see cref="T:GraphQL.Execution.ErrorInfoProviderOptions"/> filled out by the specified delegate.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetInfo(GraphQL.ExecutionError)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetCodesForError(GraphQL.ExecutionError)">
            <summary>
            <para>Returns a list of error codes derived from a specified <see cref="T:GraphQL.ExecutionError"/> instance.</para>
            <para>
            By default, this returns the <see cref="P:GraphQL.ExecutionError.Code"/> value if set, along with
            codes generated from the type of the <see cref="P:System.Exception.InnerException"/> and all their inner exceptions.
            </para>
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetErrorCode(System.Type)">
            <summary>
            Generates an normalized error code for the specified exception by taking the type name, removing the "GraphQL" prefix, if any,
            removing the "Exception" suffix, if any, and then converting the result from PascalCase to UPPER_CASE.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetErrorCode``1">
            <summary>
            Generates an normalized error code for the specified exception by taking the type name, removing the "GraphQL" prefix, if any,
            removing the "Exception" suffix, if any, and then converting the result from PascalCase to UPPER_CASE.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetErrorCode(System.Exception)">
            <summary>
            Generates an normalized error code for the specified exception by taking the type name, removing the "GraphQL" prefix, if any,
            removing the "Exception" suffix, if any, and then converting the result from PascalCase to UPPER_CASE.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ErrorInfoProviderOptions">
            <summary>
            Provides options to be used with <see cref="T:GraphQL.Execution.ErrorInfoProvider"/>
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExceptionStackTrace">
            <summary>
            Specifies whether stack traces should be serialized.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions">
            <summary>
            Specifies whether the extensions property, including by default the 'code', 'codes' and 'data' properties, should be serialized.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeCode">
            <summary>
            Specifies whether the code of this error should be returned.
            For validation errors, also returns the <see cref="P:GraphQL.Validation.ValidationError.Number"/>.
            Not applicable when <see cref="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions"/> is false.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeCodes">
            <summary>
            Specifies whether the codes of this error and inner exceptions should be returned. Not applicable when <see cref="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions"/> is false.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeData">
            <summary>
            Specifies whether data (typically from inner exceptions) should be returned. Not applicable when <see cref="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions"/> is false.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExecutionContext">
            <summary>
            Provides a mutable instance of <see cref="T:GraphQL.Execution.IExecutionContext"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Document">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Schema">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.RootValue">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Operation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Fragments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Variables">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Errors">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Metrics">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Listeners">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.ThrowOnUnhandledException">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.UnhandledExceptionDelegate">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.MaxParallelExecutionCount">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Extensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.RequestServices">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.ExecutionHelper">
            <summary>
            Provides helper methods for document execution.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.GetOperationRootType(GraphQL.Language.AST.Document,GraphQL.Types.ISchema,GraphQL.Language.AST.Operation)">
            <summary>
            Returns the root graph type for the execution -- for a specified schema and operation type.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.GetFieldDefinition(GraphQL.Types.ISchema,GraphQL.Types.IObjectGraphType,GraphQL.Language.AST.Field)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.FieldType"/> for the specified AST <see cref="T:GraphQL.Language.AST.Field"/> within a specified parent
            output graph type within a given schema. For meta-fields, returns the proper meta-field field type.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.GetVariableValues(GraphQL.Language.AST.Document,GraphQL.Types.ISchema,GraphQL.Language.AST.VariableDefinitions,GraphQL.Inputs)">
            <summary>
            Returns all of the variable values defined for the document from the attached <see cref="T:GraphQL.Inputs"/> object.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.GetVariableValue(GraphQL.Language.AST.Document,GraphQL.Types.ISchema,GraphQL.Language.AST.VariableDefinition,System.Object)">
            <summary>
            Return the specified variable's value for the document from the attached <see cref="T:GraphQL.Inputs"/> object.
            Since v3.3, returns null for variables set to null rather than the variable's default value.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.AssertValidVariableValue(GraphQL.Types.ISchema,GraphQL.Types.IGraphType,System.Object,System.String,System.Boolean)">
            <summary>
            Ensures that the specified variable value is valid for the variable's graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.GetArgumentValues(GraphQL.Types.ISchema,GraphQL.Types.QueryArguments,GraphQL.Language.AST.Arguments,GraphQL.Language.AST.Variables)">
            <summary>
            Returns a dictionary of arguments and their values for a field or directive. Values will be retrieved from literals
            or variables as specified by the document.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.CoerceValue(GraphQL.Types.ISchema,GraphQL.Types.IGraphType,GraphQL.Language.AST.IValue,GraphQL.Language.AST.Variables,System.Object)">
            <summary>
            Coerces a variable value to a compatible .NET type for the variable's graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.CollectFields(GraphQL.Execution.ExecutionContext,GraphQL.Types.IGraphType,GraphQL.Language.AST.SelectionSet)">
            <summary>
            Before execution, the selection set is converted to a grouped field set by calling CollectFields().
            Each entry in the grouped field set is a list of fields that share a response key (the alias if defined,
            otherwise the field name). This ensures all fields with the same response key included via referenced
            fragments are executed at the same time.
            <br/><br/>
            See http://spec.graphql.org/June2018/#sec-Field-Collection and http://spec.graphql.org/June2018/#CollectFields()
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.ShouldIncludeNode(GraphQL.Execution.ExecutionContext,GraphQL.Language.AST.Directives)">
            <summary>
            Examines @skip and @include directives for a node and returns a value indicating if the node should be included or not.
            <br/><br/>
            Note: Neither @skip nor @include has precedence over the other. In the case that both the @skip and @include
            directives are provided on the same field or fragment, it must be queried only if the @skip condition
            is false and the @include condition is true. Stated conversely, the field or fragment must not be queried
            if either the @skip condition is true or the @include condition is false.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.DoesFragmentConditionMatch(GraphQL.Execution.ExecutionContext,System.String,GraphQL.Types.IGraphType)">
            <summary>
            This method calculates the criterion for matching fragment definition (spread or inline) to a given graph type.
            This criterion determines the need to fill the resulting selection set with fields from such a fragment.
            <br/><br/>
            See http://spec.graphql.org/June2018/#DoesFragmentTypeApply()
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.SubFieldsFor(GraphQL.Execution.ExecutionContext,GraphQL.Types.IGraphType,GraphQL.Language.AST.Field)">
            <summary>
            Returns a list of subfields (child nodes) for a result node based on the selection set from the document.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExecutionNode">
            <summary>
            Represents a node to be executed.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Parent">
            <summary>
            Returns the parent node, or null if this is the root node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.GraphType">
            <summary>
            Returns the graph type of this node, unwrapped if it is a <see cref="T:GraphQL.Types.NonNullGraphType"/>.
            Array nodes will be a <see cref="T:GraphQL.Types.ListGraphType"/> instance.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Field">
            <summary>
            Returns the AST field of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.FieldDefinition">
            <summary>
            Returns the graph's field type of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.IndexInParentNode">
            <summary>
            For child array item nodes of a <see cref="T:GraphQL.Types.ListGraphType"/>, returns the index of this array item within the field; otherwise, null.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.ResolvedType">
            <summary>
            Returns the underlying graph type of this node, retaining the <see cref="T:GraphQL.Types.NonNullGraphType"/> wrapping if applicable.
            For child nodes of an array execution node, this property unwraps the <see cref="T:GraphQL.Types.ListGraphType"/> instance and returns
            the underlying graph type, retaining the <see cref="T:GraphQL.Types.NonNullGraphType"/> wrapping if applicable.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Name">
            <summary>
            Returns the AST field alias, if specified, or AST field name otherwise.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.IsResultSet">
            <summary>
            Returns true if the result has been set. Also returns true when the result is temporarily set to an <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/>
            pending execution at a later time.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Result">
            <summary>
            Sets or returns the result of the execution node. May return a <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/> if a node returns a data loader
            result that has not yet finished executing.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Source">
            <summary>
            Returns the parent node's result. If set, the set value will override the parent node's result.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQL.Language.AST.Field,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.ExecutionNode"/> with the specified values
            </summary>
            <param name="parent">The parent node, or null if this is the root node</param>
            <param name="graphType">The graph type of this node, unwrapped if it is a <see cref="T:GraphQL.Types.NonNullGraphType"/>. Array nodes will be a <see cref="T:GraphQL.Types.ListGraphType"/> instance.</param>
            <param name="field">The AST field of this node</param>
            <param name="fieldDefinition">The graph's field type of this node</param>
            <param name="indexInParentNode">For child array item nodes of a <see cref="T:GraphQL.Types.ListGraphType"/>, the index of this array item within the field; otherwise, null</param>
        </member>
        <member name="M:GraphQL.Execution.ExecutionNode.ToValue">
            <summary>
            Returns an object that represents the result of this node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionNode.GetParentType(GraphQL.Types.ISchema)">
            <summary>
            Returns the parent graph type of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Path">
            <summary>
            The path for the current node within the query.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.ResponsePath">
            <summary>
            The path for the current node within the response.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IParentExecutionNode">
            <summary>
            Represents an execution node with child nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IParentExecutionNode.GetChildNodes">
            <summary>
            Returns a list of child execution nodes.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ObjectExecutionNode">
            <summary>
            Represents an object execution node, which will contain child execution nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ObjectExecutionNode.SubFields">
            <summary>
            Returns a dictionary of child execution nodes, with keys set to the names of the child fields that the child nodes represent.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQL.Language.AST.Field,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.ObjectExecutionNode"/> with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.GetObjectGraphType(GraphQL.Types.ISchema)">
            <summary>
            For execution nodes that represent a field that is an <see cref="T:GraphQL.Types.IAbstractGraphType"/>, returns the
            proper <see cref="T:GraphQL.Types.IObjectGraphType"/> based on the set <see cref="P:GraphQL.Execution.ExecutionNode.Result"/>.
            Otherwise returns the value of <see cref="P:GraphQL.Execution.ExecutionNode.GraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.ToValue">
            <summary>
            Returns a representation of the result of this execution node and its children
            within a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.RootExecutionNode">
            <summary>
            Represents a root execution node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.RootExecutionNode.#ctor(GraphQL.Types.IObjectGraphType)">
            <summary>
            Initializes a new instance for the specified root graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ArrayExecutionNode">
            <summary>
            Represents an execution node of a <see cref="T:GraphQL.Types.ListGraphType"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ArrayExecutionNode.Items">
            <summary>
            Returns a list of child execution nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ArrayExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQL.Language.AST.Field,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ArrayExecutionNode"/> instance with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ArrayExecutionNode.ToValue">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> containing the results of the child execution nodes.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ValueExecutionNode">
            <summary>
            Represents a execution node of a <see cref="T:GraphQL.Types.ScalarGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ValueExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.ScalarGraphType,GraphQL.Language.AST.Field,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.ValueExecutionNode"/> with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ValueExecutionNode.ToValue">
            <summary>
            Returns <see cref="P:GraphQL.Execution.ExecutionNode.Result"/>, which has already been serialized by <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/>
            within <see cref="M:GraphQL.Execution.ExecutionStrategy.CompleteNode(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/> or
            <see cref="M:GraphQL.Execution.ExecutionStrategy.SetArrayItemNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ArrayExecutionNode)"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ValueExecutionNode.GraphType">
            <inheritdoc cref="P:GraphQL.Execution.ExecutionNode.GraphType"/>
        </member>
        <member name="T:GraphQL.Execution.NullExecutionNode">
            <summary>
            Represents an execution node which always returns null.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.NullExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQL.Language.AST.Field,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.NullExecutionNode"/> with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.NullExecutionNode.ToValue">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExecutionStrategy">
            <summary>
            The base class for the included serial and parallel execution strategies.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)">
            <summary>
            Executes a GraphQL request and returns the result. The default implementation builds the root node
            and passes execution to <see cref="M:GraphQL.Execution.ExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)"/>.
            Once complete, the values are collected into an object that is ready to be serialized and returned
            within an <see cref="T:GraphQL.ExecutionResult"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)">
            <summary>
            Executes an execution node and all of its child nodes. This is typically only executed upon
            the root execution node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.BuildExecutionRootNode(GraphQL.Execution.ExecutionContext,GraphQL.Types.IObjectGraphType)">
            <summary>
            Builds the root execution node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SetSubFieldNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)">
            <summary>
            Creates execution nodes for child fields of an object execution node. Only run if
            the object execution node result is not null.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SetSubFieldNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode,System.Collections.Generic.Dictionary{System.String,GraphQL.Language.AST.Field})">
            <summary>
            Creates specified child execution nodes of an object execution node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SetArrayItemNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ArrayExecutionNode)">
            <summary>
            Creates execution nodes for array elements of an array execution node. Only run if
            the array execution node result is not null.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.BuildExecutionNode(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQL.Language.AST.Field,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Builds an execution node with the specified parameters.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ExecuteNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Executes a single node. If the node does not return an <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/>,
            it will pass execution to <see cref="M:GraphQL.Execution.ExecutionStrategy.CompleteNode(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.CompleteDataLoaderNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Completes a pending data loader node. If the node does not return an <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/>,
            it will pass execution to <see cref="M:GraphQL.Execution.ExecutionStrategy.CompleteNode(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.CompleteNode(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Validates a node result. Builds child nodes via <see cref="M:GraphQL.Execution.ExecutionStrategy.SetSubFieldNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)">SetSubFieldNodes</see>
            and <see cref="M:GraphQL.Execution.ExecutionStrategy.SetArrayItemNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ArrayExecutionNode)">SetArrayItemNodes</see>, but does not execute them. For value
            execution nodes, it will run <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/> to serialize the result.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SetNodeError(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,GraphQL.ExecutionError)">
            <summary>
            Sets the location and path information to the error and adds it to the document. Sets the node result to null.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ProcessNodeUnhandledException(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,System.Exception)">
            <summary>
            Processes unhandled field resolver exceptions.
            </summary>
            <returns>A value that indicates when the exception should be rethrown.</returns>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ValidateNodeResult(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Validates the <see cref="P:GraphQL.Execution.ExecutionNode.Result"/> to ensure that it is valid for the node.
            Errors typically occur when a null value is returned for a non-null graph type. Also validates the
            object type when <see cref="P:GraphQL.Types.IObjectGraphType.IsTypeOf"/> is assigned, or when the graph type
            is an <see cref="T:GraphQL.Types.IAbstractGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.OnBeforeExecutionStepAwaitedAsync(GraphQL.Execution.ExecutionContext)">
            <summary>
            If there are any <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>s specified within the <see cref="T:GraphQL.Execution.ExecutionContext"/>,
            runs the <see cref="M:GraphQL.Execution.IDocumentExecutionListener.BeforeExecutionStepAwaitedAsync(GraphQL.Execution.IExecutionContext)">BeforeExecutionStepAwaitedAsync</see>
            method on each of the registered document execution listeners.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.GraphQLDocumentBuilder">
            <summary>
            <inheritdoc cref="T:GraphQL.Execution.IDocumentBuilder"/>
            <br/><br/>
            Default instance of <see cref="T:GraphQL.Execution.IDocumentBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.GraphQLDocumentBuilder.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.GraphQLDocumentBuilder.Build(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.IDocumentBuilder">
            <summary>
            Creates a <see cref="T:GraphQL.Language.AST.Document">Document</see> representing a GraphQL AST from a plain GraphQL query string
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentBuilder.Build(System.String)">
            <summary>
            Parse a GraphQL request and return a <see cref="T:GraphQL.Language.AST.Document">Document</see> representing the GraphQL request AST
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IErrorInfoProvider">
            <summary>
            Prepares <see cref="T:GraphQL.ExecutionError"/>s for serialization by the <see cref="T:GraphQL.IDocumentWriter"/>
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IErrorInfoProvider.GetInfo(GraphQL.ExecutionError)">
            <summary>
            Parses an <see cref="T:GraphQL.ExecutionError"/> into a <see cref="T:GraphQL.Execution.ErrorInfo"/> struct
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IExecutionContext">
            <summary>
            Provides information regarding the currently executing document.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.CancellationToken">
            <summary>
            Propagates notification that the GraphQL request should be canceled
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Document">
            <summary>
            The parsed GraphQL request
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Errors">
            <summary>
            A list of errors generated during GraphQL request processing
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Fragments">
            <summary>
            A list of <see cref="T:GraphQL.Language.AST.FragmentDefinition"/>s that pertain to the GraphQL request
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Listeners">
            <summary>
            A list of <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>s, enabling code to be executed at various points during the processing of the GraphQL query
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.MaxParallelExecutionCount">
            <summary>
            If set, limits the maximum number of nodes (in other words GraphQL fields) executed in parallel
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Metrics">
            <summary>
            Provides performance metrics logging capabilities
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Operation">
            <summary>
            The GraphQL operation that is being executed
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.RootValue">
            <summary>
            Object to pass to the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property of first-level resolvers
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Schema">
            <summary>
            Schema of the graph to use
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.ThrowOnUnhandledException">
            <summary>
            When <c>false</c>, <see cref="T:GraphQL.DocumentExecuter"/> and <see cref="T:GraphQL.Execution.ExecutionStrategy"/> capture unhandled
            exceptions and store them within <see cref="P:GraphQL.Execution.IExecutionContext.Errors">Errors</see>
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.UnhandledExceptionDelegate">
            <summary>
            A delegate that can override, hide, modify, or log unhandled exceptions before they are stored
            within <see cref="P:GraphQL.Execution.IExecutionContext.Errors"/> as an <see cref="T:GraphQL.ExecutionError"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Variables">
            <summary>
            Input variables to the GraphQL request
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Extensions">
            <summary>
            The response map may also contain an entry with key extensions. This entry is reserved for implementors to extend the
            protocol however they see fit, and hence there are no additional restrictions on its contents.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.RequestServices">
            <summary>
            The service provider for the executing request. Typically this is a scoped service provider
            from your dependency injection framework.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IExecutionStrategy">
            <summary>
            Processes a parsed GraphQL request, resolving all the nodes and returning the result; exceptions
            are unhandled. Should not run any <see cref="T:GraphQL.Execution.IDocumentExecutionListener">IDocumentExecutionListener</see>s except
            for <see cref="M:GraphQL.Execution.IDocumentExecutionListener.BeforeExecutionStepAwaitedAsync(GraphQL.Execution.IExecutionContext)">BeforeExecutionStepAwaitedAsync</see>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)">
            <summary>
            Executes a GraphQL request and returns the result
            </summary>
            <param name="context">The execution parameters</param>
        </member>
        <member name="T:GraphQL.Execution.InvalidOperationError">
            <summary>
            Represents an error triggered by an invalid operation being requested that is not configured for the schema.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.InvalidOperationError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.InvalidOperationError"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.InvalidVariableError">
            <summary>
            Represents an error triggered by an invalid variable passed with the associated document.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.InvalidVariableError.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.InvalidVariableError"/> class for a specified variable and error message.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.InvalidVariableError.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.InvalidVariableError"/> class for a specified variable
            and error message. Loads any exception data from the inner exception into this instance.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IProvideUserContext">
            <summary>
            Provides access to a mutable user-defined context for the duration of the query
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IProvideUserContext.UserContext">
            <summary>
            Mutable user-defined context to be passed to and shared by all field resolvers.
            <br/><br/>
            A custom implementation of <see cref="T:System.Collections.Generic.IDictionary`2">IDictionary</see> may be
            used in place of the default <see cref="T:System.Collections.Generic.Dictionary`2">Dictionary</see>.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.NoOperationError">
            <summary>
            Represents an error triggered when the document does not include any operations.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.NoOperationError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.NoOperationError"/> class.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ParallelExecutionStrategy">
            <inheritdoc cref="M:GraphQL.Execution.ParallelExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)"/>
        </member>
        <member name="M:GraphQL.Execution.ParallelExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)">
            <summary>
            Executes document nodes in parallel. Field resolvers must be designed for multi-threaded use.
            Nodes that return a <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/> will execute once all other pending nodes
            have been completed.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ParallelExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <inheritdoc cref="M:GraphQL.Execution.ParallelExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)"/>
        </member>
        <member name="T:GraphQL.Execution.SerialExecutionStrategy">
            <inheritdoc cref="M:GraphQL.Execution.SerialExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)"/>
        </member>
        <member name="M:GraphQL.Execution.SerialExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)">
            <summary>
            Executes document nodes serially. Nodes that return a <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/> will
            execute once all other pending nodes have been completed.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.SyntaxError">
            <summary>
            Represents an error generated while parsing the document.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SyntaxError.#ctor(GraphQLParser.Exceptions.GraphQLSyntaxErrorException)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.SyntaxError"/> class from a specified
            <see cref="T:GraphQLParser.Exceptions.GraphQLSyntaxErrorException"/> instance, setting the <see cref="P:System.Exception.Message">Message</see>
            and <see cref="P:GraphQL.ExecutionError.Locations">Locations</see> properties appropriately.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.UnhandledError">
            <summary>
            Represents an unhandled exception caught during document or subscription processing.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.UnhandledError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.UnhandledError"/> class with a specified error message. Sets the
            <see cref="P:GraphQL.ExecutionError.Code">Code</see> property based on the inner exception.
            Loads any exception data from the inner exception into this instance.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.UnhandledExceptionContext">
            <summary>
            Provides contextual information for the unhandled exception delegate, <see cref="P:GraphQL.Execution.ExecutionContext.UnhandledExceptionDelegate"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.UnhandledExceptionContext.#ctor(GraphQL.Execution.ExecutionContext,GraphQL.IResolveFieldContext,System.Exception)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.Context">
            <summary>
            Returns the execution context.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.FieldContext">
            <summary>
            Field context whose resolver generated an error. Will be <c>null</c> if the error came from
            <see cref="M:GraphQL.DocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)"/>, for example, validation stage.
            Also will be <c>null</c> between resolvers execution if <c>cancellationToken</c> is canceled.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.OriginalException">
            <summary>
            Original exception from field resolver or <see cref="T:GraphQL.DocumentExecuter"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.Exception">
            <summary>
            Allows to change resulting exception keeping original exception unmodified.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.ErrorMessage">
            <summary>
            Allows to change resulting error message from default one.
            </summary>
        </member>
        <member name="T:GraphQL.DocumentExecuter">
            <summary>
            <inheritdoc cref="T:GraphQL.IDocumentExecuter"/>
            <br/><br/>
            Default implementation for <see cref="T:GraphQL.IDocumentExecuter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.#ctor">
            <summary>
            Initializes a new instance with default <see cref="T:GraphQL.Execution.IDocumentBuilder"/>,
            <see cref="T:GraphQL.Validation.IDocumentValidator"/> and <see cref="T:GraphQL.Validation.Complexity.IComplexityAnalyzer"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.#ctor(GraphQL.Execution.IDocumentBuilder,GraphQL.Validation.IDocumentValidator,GraphQL.Validation.Complexity.IComplexityAnalyzer)">
            <summary>
            Initializes a new instance with specified <see cref="T:GraphQL.Execution.IDocumentBuilder"/>,
            <see cref="T:GraphQL.Validation.IDocumentValidator"/> and <see cref="T:GraphQL.Validation.Complexity.IComplexityAnalyzer"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.DocumentExecuter.GetOperation(System.String,GraphQL.Language.AST.Document)">
            <summary>
            Returns the selected <see cref="T:GraphQL.Language.AST.Operation"/> given a specified <see cref="T:GraphQL.Language.AST.Document"/> and operation name.
            <br/><br/>
            Returns <c>null</c> if an operation cannot be found that matches the given criteria.
            Returns the first operation from the document if no operation name was specified.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.SelectExecutionStrategy(GraphQL.Execution.ExecutionContext)">
            <summary>
            Returns an instance of an <see cref="T:GraphQL.Execution.IExecutionStrategy"/> given specified execution parameters.
            <br/><br/>
            Typically the strategy is selected based on the type of operation.
            <br/><br/>
            By default, query operations will return a <see cref="T:GraphQL.Execution.ParallelExecutionStrategy"/> while mutation operations return a
            <see cref="T:GraphQL.Execution.SerialExecutionStrategy"/> and subscription operations return a <see cref="T:GraphQL.Execution.SubscriptionExecutionStrategy"/>.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionError">
            <summary>
            Represents an error generated while processing a document and intended to be returned within an <see cref="T:GraphQL.ExecutionResult"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.ExecutionError"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.#ctor(System.String,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.ExecutionError"/> class with a specified error message and exception data.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.ExecutionError"/> class with a specified error message. Sets the
            <see cref="P:GraphQL.ExecutionError.Code"/> property based on the inner exception. Loads any exception data
            from the inner exception into this instance.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionError.Locations">
            <summary>
            Returns a list of locations within the document that this error applies to.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionError.Code">
            <summary>
            Gets or sets a code for this error.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionError.Path">
            <summary>
            Gets or sets the path within the GraphQL document where this error applies to.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.AddLocation(System.Int32,System.Int32)">
            <summary>
            Adds a location to the list of locations that this error applies to.
            </summary>
        </member>
        <member name="T:GraphQL.ErrorLocation">
            <summary>
            Represents a location within a document where a parsing or execution error occurred.
            </summary>
        </member>
        <member name="P:GraphQL.ErrorLocation.Line">
            <summary>
            The line number of the document where the error occurred, where 1 is the first line.
            </summary>
        </member>
        <member name="P:GraphQL.ErrorLocation.Column">
            <summary>
            The column number of the document where the error occurred, where 1 is the first column.
            </summary>
        </member>
        <member name="M:GraphQL.ErrorLocation.Equals(GraphQL.ErrorLocation)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.ErrorLocation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.ErrorLocation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.ErrorLocation.op_Equality(GraphQL.ErrorLocation,GraphQL.ErrorLocation)">
            <summary>
            Indicates whether two <see cref="T:GraphQL.ErrorLocation"/> instances are the same.
            </summary>
        </member>
        <member name="M:GraphQL.ErrorLocation.op_Inequality(GraphQL.ErrorLocation,GraphQL.ErrorLocation)">
            <summary>
            Indicates whether two <see cref="T:GraphQL.ErrorLocation"/> instances are not the same.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionErrorExtensions">
            <summary>
            Provides extension methods for <see cref="T:GraphQL.ExecutionError"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrorExtensions.AddLocation(GraphQL.ExecutionError,GraphQL.Language.AST.AbstractNode,GraphQL.Language.AST.Document)">
            <summary>
            Adds a location to an <see cref="T:GraphQL.ExecutionError"/> based on a <see cref="T:GraphQL.Language.AST.AbstractNode"/> within a <see cref="T:GraphQL.Language.AST.Document"/>.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionErrors">
            <summary>
            Contains a list of execution errors.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrors.Add(GraphQL.ExecutionError)">
            <summary>
            Adds an execution error to the list.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrors.AddRange(System.Collections.Generic.IEnumerable{GraphQL.ExecutionError})">
            <summary>
            Adds a list of execution errors to the list.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionErrors.Count">
            <summary>
            Returns the number of execution errors in the list.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionErrors.Item(System.Int32)">
            <summary>
            Returns the execution error at the specified index.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrors.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.EmptyExecutionErrors">
            <summary>
            Optimization for validation "green path" - does not allocate memory in managed heap.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionOptions">
            <summary>Configuration options to be passed to <see cref="T:GraphQL.IDocumentExecuter"/> to execute a query</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Schema">
            <summary>
            Schema of graph to use; required
            <br/><br/>
            Schema will be initialized if it has not yet been initialized.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Root">
            <summary>Object to pass to the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property of first-level resolvers</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Query">
            <summary>GraphQL query to parse and execute; required</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.OperationName">
            <summary>GraphQL query operation name; optional, defaults to first (if any) operation defined in query</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Document">
            <summary>Parsed GraphQL request; can be used to increase performance when implementing a cache of parsed GraphQL requests (a <see cref="T:GraphQL.Language.AST.Document"/>). If not set, it will be parsed from <see cref="P:GraphQL.ExecutionOptions.Query"/></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Inputs">
            <summary>Input variables to GraphQL request</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.CancellationToken">
            <summary><see cref="T:System.Threading.CancellationToken">CancellationToken</see> to cancel the request at any stage of its execution; defaults to <see cref="P:System.Threading.CancellationToken.None"/></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.ValidationRules">
            <summary>Validation rules to be used by the <see cref="T:GraphQL.Validation.IDocumentValidator"/>; defaults to standard list of of validation rules - see <see cref="F:GraphQL.Validation.DocumentValidator.CoreRules"/></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ExecutionOptions.FieldMiddleware">
            <summary>
            Note that field middlewares apply only to an uninitialized schema. If the schema is initialized
            then applying different middleware through options does nothing. The schema is initialized (if not yet)
            at the beginning of the first call to <see cref="T:GraphQL.DocumentExecuter"/>.<see cref="M:GraphQL.DocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)">ExecuteAsync</see>.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.ComplexityConfiguration">
            <summary>Complexity constraints for <see cref="T:GraphQL.Validation.Complexity.IComplexityAnalyzer"/> to use to validate maximum query complexity</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Listeners">
            <summary>A list of <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>s, enabling code to be executed at various points during the processing of the GraphQL query</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.NameConverter">
            <summary>Field and argument names are sanitized by the provided <see cref="T:GraphQL.Conversion.INameConverter"/>; defaults to <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.EnableMetrics">
            <summary>This setting essentially allows Apollo Tracing. Disabling will increase performance.</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.ThrowOnUnhandledException">
            <summary>When false, captures unhandled exceptions and returns them within <see cref="P:GraphQL.ExecutionResult.Errors">ExecutionResult.Errors</see></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.UnhandledExceptionDelegate">
            <summary>
            A delegate that can override, hide, modify, or log unhandled exceptions before they are stored
            within <see cref="P:GraphQL.ExecutionResult.Errors"/> as an <see cref="T:GraphQL.ExecutionError"/>.
            This can be useful for hiding error messages that reveal server implementation details.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.MaxParallelExecutionCount">
            <summary>If set, limits the maximum number of nodes executed in parallel</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.SchemaFilter">
            <summary>Provides the ability to filter the schema upon introspection to hide types; by default no types are hidden.</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.RequestServices">
            <summary>
            The service provider for the executing request. Typically this is set to a scoped service provider
            from your dependency injection framework.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionResult">
            <summary>
            Represents the result of an execution.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Data">
            <summary>
            Returns the data from the graph resolvers. This property is serialized as part of the GraphQL json response.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Errors">
            <summary>
            Returns a set of errors that occurred during any stage of processing (parsing, validating, executing, etc.). This property is serialized as part of the GraphQL json response.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Query">
            <summary>
            Returns the original GraphQL query.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Document">
            <summary>
            Returns the parsed GraphQL request.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Operation">
            <summary>
            Returns the GraphQL operation that is being executed.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Perf">
            <summary>
            Returns the performance metrics (Apollo Tracing) when enabled by <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/>.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Extensions">
            <summary>
            Returns additional user-defined data; see <see cref="P:GraphQL.Execution.IExecutionContext.Extensions"/> and <see cref="P:GraphQL.IResolveFieldContext.Extensions"/>. This property is serialized as part of the GraphQL json response.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionResult.#ctor">
            <summary>
            Initializes a new instance with all properties set to their defaults.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionResult.#ctor(GraphQL.ExecutionResult)">
            <summary>
            Initializes a new instance as a clone of an existing <see cref="T:GraphQL.ExecutionResult"/>.
            </summary>
        </member>
        <member name="T:GraphQL.IDocumentExecuter">
            <summary>
            Processes an entire GraphQL request, given an input GraphQL request string. This is intended to
            be called by user code to process a query.
            <br/><br/>
            Typical implementation starts metrics if enabled (see <see cref="T:GraphQL.Instrumentation.Metrics">Metrics</see>),
            relies on <see cref="T:GraphQL.Execution.IDocumentBuilder">IDocumentBuilder</see> to parse the query,
            <see cref="T:GraphQL.Validation.IDocumentValidator">IDocumentValidator</see> to validate it, and
            <see cref="T:GraphQL.Validation.Complexity.IComplexityAnalyzer">IComplexityAnalyzer</see> to validate the complexity constraints.
            Then it executes document listeners if attached, selects an execution strategy, and executes the query
            via <see cref="T:GraphQL.Execution.IExecutionStrategy">IExecutionStrategy</see>. Unhandled exceptions are handled as appropriate for the selected options.
            </summary>
        </member>
        <member name="M:GraphQL.IDocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)">
            <summary>
            Executes a GraphQL request and returns the result
            </summary>
            <param name="options">The options of the execution</param>
        </member>
        <member name="T:GraphQL.DocumentExecuterExtensions">
            <summary>
            Extension methods for <see cref="T:GraphQL.IDocumentExecuter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuterExtensions.ExecuteAsync(GraphQL.IDocumentExecuter,System.Action{GraphQL.ExecutionOptions})">
            <summary>
            Executes a GraphQL request and returns the result
            </summary>
            <param name="executer">An instance of <see cref="T:GraphQL.IDocumentExecuter"/> to use to execute the query</param>
            <param name="configure">A delegate which configures the execution options</param>
        </member>
        <member name="T:GraphQL.Inputs">
            <summary>
            Represents a readonly dictionary of variable inputs to a document. Typically this
            contains the deserialized 'variables' property from the GraphQL request. During document execution,
            these inputs will be validated and coerced into a <see cref="T:GraphQL.Language.AST.Variables"/> dictionary.
            </summary>
        </member>
        <member name="F:GraphQL.Inputs.Empty">
            <summary>
            Returns an empty set of inputs.
            </summary>
        </member>
        <member name="M:GraphQL.Inputs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance that is a wrapper for the specified dictionary of elements.
            </summary>
        </member>
        <member name="T:GraphQL.InputsExtensions">
            <summary>
            Provides extension methods for converting a dictionary into <see cref="T:GraphQL.Inputs"/>.
            </summary>
        </member>
        <member name="M:GraphQL.InputsExtensions.ToInputs(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary into an <see cref="T:GraphQL.Inputs"/>.
            </summary>
            <param name="dictionary">A dictionary.</param>
            <returns>Inputs.</returns>
        </member>
        <member name="T:GraphQL.GraphQLExtensions">
            <summary>
            Provides extension methods for working with graph types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.TrimGraphQLTypes(System.String)">
            <summary>
            Removes brackets and exclamation points from a GraphQL type name -- for example,
            converts <c>[Int!]</c> to <c>Int</c>
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsCompositeType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is a union, interface or object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsLeafType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is a scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsInputType(System.Type)">
            <summary>
            Indicates if the type is an input graph type (scalar or input object).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsInputType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is an input graph type (scalar or input object).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsOutputType(System.Type)">
            <summary>
            Indicates if the type is an output graph type (scalar, object, interface or union).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsOutputType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is an output graph type (scalar, object, interface or union).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsInputObjectType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is an input object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.GetNamedType(GraphQL.Types.IGraphType)">
            <summary>
            Unwraps any list/non-null graph type wrappers from a graph type and returns the base graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.GetNamedType(System.Type)">
            <summary>
            Unwraps any list/non-null graph type wrappers from a graph type and returns the base graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsValidInterfaceFor(GraphQL.Types.IInterfaceGraphType,GraphQL.Types.IObjectGraphType,System.Boolean)">
            <summary>
            An Interface defines a list of fields; Object types that implement that interface are guaranteed to implement those fields.
            Whenever the type system claims it will return an interface, it will return a valid implementing type.
            </summary>
            <param name="iface">The interface graph type.</param>
            <param name="type">The object graph type to verify it against.</param>
            <param name="throwError"> Set to <c>true</c> to generate an error if the type does not match the interface. </param>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.BuildNamedType(System.Type,System.Func{System.Type,GraphQL.Types.IGraphType})">
            <summary>
            Returns a new instance of the specified graph type, using the specified resolver to
            instantiate a new instance. Defaults to <see cref="M:System.Activator.CreateInstance(System.Type)"/>
            if no <paramref name="resolve"/> parameter is specified. List and non-null graph
            types are instantiated and their <see cref="P:GraphQL.Types.IProvideResolvedType.ResolvedType"/>
            property is set to a new instance of the base (wrapped) type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsValidLiteralValue(GraphQL.Types.IGraphType,GraphQL.Language.AST.IValue,GraphQL.Types.ISchema)">
            <summary>
            Validates that the specified AST value is valid for the specified scalar or input graph type.
            Graph types that are lists or non-null types are handled appropriately by this method.
            Returns a list of strings representing the errors encountered while validating the value.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.NameOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the name of the member it references.
            For instance, returns <c>Widget</c> given an expression of <c>x => x.Widget</c>.
            Unable to parse any expressions that are more complex than a simple member access.
            Throws an <see cref="T:System.InvalidCastException"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DescriptionOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the description of the member it
            references as listed by a <see cref="T:System.ComponentModel.DescriptionAttribute"/>.
            Unable to parse any expressions that are more complex than a simple member access.
            Returns <see langword="null"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DeprecationReasonOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the deprecation reason of the member it
            references as listed by a <see cref="T:System.ObsoleteAttribute"/>.
            Unable to parse any expressions that are more complex than a simple member access.
            Returns <see langword="null"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DefaultValueOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the default value of the member it
            references as listed by a <see cref="T:System.ComponentModel.DefaultValueAttribute"/>.
            Unable to parse any expressions that are more complex than a simple member access.
            Returns <see langword="null"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.WithMetadata``1(``0,System.String,System.Object)">
            <summary>
            Adds a key-value metadata pair to the specified provider.
            </summary>
            <typeparam name="TMetadataProvider"> The type of metadata provider. Generics are used here to let compiler infer the returning type to allow methods chaining. </typeparam>
            <param name="provider"> Metadata provider which must implement <see cref="T:GraphQL.Types.IProvideMetadata"/> interface. </param>
            <param name="key"> String key. </param>
            <param name="value"> Arbitrary value. </param>
            <returns> The reference to the specified <paramref name="provider"/>. </returns>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsSubtypeOf(GraphQL.Types.IGraphType,GraphQL.Types.IGraphType,GraphQL.Types.ISchema)">
            <summary>
            Provided a type and a super type, return true if the first type is either
            equal or a subset of the second super type (covariant).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DoTypesOverlap(GraphQL.Types.IGraphType,GraphQL.Types.IGraphType)">
             <summary>
             Provided two composite types, determine if they "overlap". Two composite
             types overlap when the Sets of possible concrete types for each intersect.
            
             This is often used to determine if a fragment of a given type could possibly
             be visited in a context of another type.
            
             This function is commutative.
             </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.AstFromValue(System.Object,GraphQL.Types.ISchema,GraphQL.Types.IGraphType)">
            <summary>
            Attempts to serialize a value into an AST representation for a specified graph type.
            May throw exceptions during the serialization process.
            </summary>
        </member>
        <member name="T:GraphQL.IDocumentWriter">
            <summary>
            Serializes an object hierarchy to a stream. Typically this would be serializing an instance of the ExecutionResult class into a JSON stream.
            </summary>
        </member>
        <member name="M:GraphQL.IDocumentWriter.WriteAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously serializes the specified object to the specified stream.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace">
            <summary>
            Contains Apollo tracing metrics.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTrace.#ctor(System.DateTime,System.Double)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="start">The UTC date and time that the GraphQL document began execution.</param>
            <param name="durationMs">The number of milliseconds that it took to execute the GraphQL document.</param>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Version">
            <summary>
            Returns the Apollo tracing version number.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.StartTime">
            <summary>
            Returns the UTC date and time when the document began execution. Should be serialized as a RFC 3339 string.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.EndTime">
            <summary>
            Returns the UTC date and time when the document completed execution. Should be serialized as a RFC 3339 string.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Duration">
            <summary>
            Returns the duration of the document's execution, in nanoseconds.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Parsing">
            <summary>
            Returns the parsing metrics.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Validation">
            <summary>
            Returns the validation metrics.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Execution">
            <summary>
            Returns the execution metrics.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTrace.ConvertTime(System.Double)">
            <summary>
            Converts a quantity of milliseconds to nanoseconds.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace.OperationTrace">
            <summary>
            Represents the start offset and duration of an operation.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.OperationTrace.StartOffset">
            <summary>
            Gets or sets the start offset of the operation, in nanoseconds.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.OperationTrace.Duration">
            <summary>
            Gets or sets the duration of the operation, in nanoseconds.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace.ExecutionTrace">
            <summary>
            Represents metrics pertaining to the execution of a GraphQL document.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ExecutionTrace.Resolvers">
            <summary>
            Returns a list of resolvers executed during the execution of a GraphQL document.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace.ResolverTrace">
            <summary>
            Represents metrics pertaining to the execution of a field resolver.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.Path">
            <summary>
            Gets or sets the path of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.ParentType">
            <summary>
            Gets or sets the parent graph type name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.ReturnType">
            <summary>
            Gets or sets the returned graph type name.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTracingExtensions">
            <summary>
            Methods to add Apollo tracing metrics to an <see cref="T:GraphQL.ExecutionResult"/> instance.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTracingExtensions.EnrichWithApolloTracing(GraphQL.ExecutionResult,System.DateTime)">
            <summary>
            Adds Apollo tracing metrics to an <see cref="T:GraphQL.ExecutionResult"/> instance,
            stored within <see cref="P:GraphQL.ExecutionResult.Extensions"/>["tracing"].
            Requires that the GraphQL document was executed with metrics enabled;
            see <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/>. With <see cref="T:GraphQL.Instrumentation.InstrumentFieldsMiddleware"/>
            installed, also includes metrics from field resolvers.
            </summary>
            <param name="result">An <see cref="T:GraphQL.ExecutionResult"/> instance.</param>
            <param name="start">The UTC date and time that the GraphQL document began execution.</param>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTracingExtensions.CreateTrace(GraphQL.Instrumentation.PerfRecord[],System.DateTime)">
            <summary>
            Initializes an <see cref="T:GraphQL.Instrumentation.ApolloTrace"/> instance and populates it with performance
            metrics gathered during the GraphQL document execution.
            </summary>
            <param name="perf">A list of performance records; typically as returned from <see cref="M:GraphQL.Instrumentation.Metrics.Finish"/>.</param>
            <param name="start">The UTC date and time that the GraphQL document began execution.</param>
        </member>
        <member name="T:GraphQL.Instrumentation.FieldMiddlewareBuilder">
            <summary>
            Default implementation of <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilder.Use(System.Func{GraphQL.Types.ISchema,GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilder.ApplyTo(GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/> to add middlewares.
            These methods are built on top of <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.Use(System.Func{GraphQL.Types.ISchema,GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,GraphQL.Instrumentation.IFieldMiddleware)">
            <summary>
            Adds middleware to the list of delegates that will be applied to the schema when invoking <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.ApplyTo(GraphQL.Types.ISchema)"/>.
            </summary>
            <param name="builder">Interface for connecting middlewares to a schema.</param>
            <param name="middleware">Middleware instance.</param>
            <returns>Reference to the same <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.</returns>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,System.Func{GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})">
            <summary>
            Adds the specified delegate to the list of delegates that will be applied to the schema when invoking <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.ApplyTo(GraphQL.Types.ISchema)"/>.
            <br/><br/>
            This is a compatibility shim when compiling delegates without schema specified.
            </summary>
            <param name="builder">Interface for connecting middlewares to a schema.</param>
            <param name="middleware">Middleware delegate.</param>
            <returns>Reference to the same <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.</returns>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use``1(GraphQL.Instrumentation.IFieldMiddlewareBuilder)">
            <summary>
            Adds middleware specified by its type to the list of delegates that will be applied to the schema when invoking <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.ApplyTo(GraphQL.Types.ISchema)"/>.
            <br/><br/>
            Middleware will be created using the DI container obtained from the <see cref="T:GraphQL.Types.Schema"/>.
            </summary>
            <typeparam name="T">Middleware type.</typeparam>
            <param name="builder">Interface for connecting middlewares to a schema.</param>
            <returns>Reference to the same <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.</returns>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,System.Type)">
            <summary>
            Adds middleware specified by its type to the list of delegates that will be applied to the schema when invoking <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.ApplyTo(GraphQL.Types.ISchema)"/>.
            <br/><br/>
            Middleware will be created using the DI container obtained from the <see cref="T:GraphQL.Types.Schema"/>.
            </summary>
            <param name="builder">Interface for connecting middlewares to a schema.</param>
            <param name="middleware">Middleware type.</param>
            <returns>Reference to the same <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.</returns>
        </member>
        <member name="T:GraphQL.Instrumentation.FieldMiddlewareDelegate">
            <summary>
            Encapsulates a method that has a parameter of type <see cref="T:GraphQL.IResolveFieldContext"/> and
            asynchronously returns an object.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.IFieldMiddleware">
            <summary>
            Interface for field middleware. It doesn’t have to be implemented on your middleware.
            Then a search will be made for such a method with a suitable signature. Nevertheless,
            to improve performance, it is recommended to implement this interface.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.IFieldMiddleware.Resolve(GraphQL.IResolveFieldContext,GraphQL.Instrumentation.FieldMiddlewareDelegate)">
            <summary>
            Handles execution of a field.
            </summary>
            <param name="context">Contains parameters pertaining to the currently executing field.</param>
            <param name="next">The delegate representing the remaining middleware and field resolver in the pipeline.</param>
            <returns>Asynchronously returns the result for the field.</returns>
        </member>
        <member name="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder">
            <summary>
            Interface for connecting middlewares to a schema.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.Use(System.Func{GraphQL.Types.ISchema,GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})">
            <summary>
            Adds the specified delegate to the list of delegates that will be applied to the schema when invoking <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.ApplyTo(GraphQL.Types.ISchema)"/>.
            <br/><br/>
            The delegate is used to unify the different ways of specifying middleware. See additional methods in <see cref="T:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions"/>.
            </summary>
            <param name="middleware">Middleware delegate.</param>
            <returns>Reference to the same <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.</returns>
        </member>
        <member name="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.ApplyTo(GraphQL.Types.ISchema)">
            <summary>
            Applies all delegates specified by the <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.Use(System.Func{GraphQL.Types.ISchema,GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})"/> method to the schema.
            <br/><br/>
            When applying to the schema, modifies the resolver of each field of each graph type adding required behavior.
            Therefore, as a rule, this method should be called only once during schema initialization. See <see cref="M:GraphQL.DocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)"/>.
            </summary>
            <param name="schema">The schema to which you want to apply middlewares.</param>
        </member>
        <member name="T:GraphQL.Instrumentation.InstrumentFieldsMiddleware">
            <summary>
            Middleware required for Apollo tracing to record performance metrics of field resolvers.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.InstrumentFieldsMiddleware.Resolve(GraphQL.IResolveFieldContext,GraphQL.Instrumentation.FieldMiddlewareDelegate)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Instrumentation.Metrics">
            <summary>
            Records metrics during execution of a GraphQL document
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Instrumentation.Metrics"/> class.
            </summary>
            <param name="enabled">Indicates if metrics should be recorded for this execution.</param>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Start(System.String)">
            <summary>
            Logs the start of the execution.
            </summary>
            <param name="operationName">The name of the GraphQL operation.</param>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.SetOperationName(System.String)">
            <summary>
            Sets the name of the GraphQL operation.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Subject(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Records an performance metric.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Finish">
            <summary>
            Returns the collected performance metrics.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.Metrics.Marker">
            <summary>
            An object that, when disposed, records the completion time of a performance metric in an assigned <see cref="T:GraphQL.Instrumentation.PerfRecord"/>.
            </summary>
        </member>
        <member name="F:GraphQL.Instrumentation.Metrics.Marker.Empty">
            <summary>
            Returns an instance that does not perform any action when disposed.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Marker.#ctor(GraphQL.Instrumentation.PerfRecord,GraphQL.Instrumentation.ValueStopwatch)">
            <summary>
            Initializes an instance with the specified performance metric and running stopwatch.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Marker.Dispose">
            <summary>
            Stores the completion time of the assigned performance metric.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.PerfRecord">
            <summary>
            Records a performance metric.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.PerfRecord.#ctor(System.String,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.PerfRecord.MarkEnd(System.Double)">
            <summary>
            Sets the completion time, represented as an offset in milliseconds from starting the GraphQL operation's execution.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Category">
            <summary>
            Gets or sets the category name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Subject">
            <summary>
            Gets or sets the subject name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Metadata">
            <summary>
            Gets or sets a dictionary of additional metadata.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Start">
            <summary>
            Gets or sets the start time, represented as an offset in milliseconds from starting the GraphQL operation's execution.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.End">
            <summary>
            Gets or sets the completion time, represented as an offset in milliseconds from starting the GraphQL operation's execution.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Duration">
            <summary>
            Returns the total number of milliseconds required to execute the operation represented by this performance metric.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.PerfRecord.MetaField``1(System.String)">
            <summary>
            Returns metadata for the specified key. Similar to <see cref="P:GraphQL.Instrumentation.PerfRecord.Metadata"/>[<paramref name="key"/>], but returns <c>default</c>
            if <see cref="P:GraphQL.Instrumentation.PerfRecord.Metadata"/> is <c>null</c> or the specified key does not exist.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ValueStopwatch">
            <summary>
            This is already familiar <see cref="T:System.Diagnostics.Stopwatch"/> but as a readonly struct. Doesn't allocate memory on the managed heap.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ValueStopwatch.IsActive">
            <inheritdoc cref="P:System.Diagnostics.Stopwatch.IsRunning"/>
        </member>
        <member name="M:GraphQL.Instrumentation.ValueStopwatch.StartNew">
            <inheritdoc cref="M:System.Diagnostics.Stopwatch.StartNew"/>
        </member>
        <member name="P:GraphQL.Instrumentation.ValueStopwatch.Elapsed">
            <inheritdoc cref="P:System.Diagnostics.Stopwatch.Elapsed"/>
        </member>
        <member name="T:GraphQL.Introspection.ISchemaFilter">
            <summary>
            Provides the ability to filter the schema upon introspection to hide types, fields, arguments, enum values, and directives.
            Can be used to hide information, such as graph types, from clients that have an inadequate permission level.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowType(GraphQL.Types.IGraphType)">
            <summary>
            Returns a boolean indicating whether the specified graph type should be returned within the introspection query.
            </summary>
            <param name="type">The graph type to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowField(GraphQL.Types.IGraphType,GraphQL.Types.IFieldType)">
            <summary>
            Returns a boolean indicating whether the specified field should be returned within the introspection query.
            </summary>
            <param name="parent">The parent type to which the field belongs.</param>
            <param name="field">The field to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowArgument(GraphQL.Types.IFieldType,GraphQL.Types.QueryArgument)">
            <summary>
            Returns a boolean indicating whether the specified argument should be returned within the introspection query.
            </summary>
            <param name="field">The field to which the argument belongs.</param>
            <param name="argument">The argument to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowEnumValue(GraphQL.Types.EnumerationGraphType,GraphQL.Types.EnumValueDefinition)">
            <summary>
            Returns a boolean indicating whether the specified enumeration value should be returned within the introspection query.
            </summary>
            <param name="parent">The enumeration to which the enumeration value belongs.</param>
            <param name="enumValue">The enumeration value to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowDirective(GraphQL.Types.DirectiveGraphType)">
            <summary>
            Returns a boolean indicating whether the specified directive should be returned within the introspection query.
            </summary>
            <param name="directive">The directive to consider.</param>
        </member>
        <member name="T:GraphQL.Introspection.DefaultSchemaFilter">
            <summary>
            The default schema filter. By default nothing is hidden.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowType(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowField(GraphQL.Types.IGraphType,GraphQL.Types.IFieldType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowArgument(GraphQL.Types.IFieldType,GraphQL.Types.QueryArgument)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowEnumValue(GraphQL.Types.EnumerationGraphType,GraphQL.Types.EnumValueDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowDirective(GraphQL.Types.DirectiveGraphType)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Introspection.SchemaMetaFieldType">
            <summary>
            The <c>__schema</c> meta-field is available on the root of a query operation and returns a <c>__Schema</c> graph type for the schema.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.SchemaMetaFieldType.#ctor">
            <summary>
            Initializes a new instance of the <c>__schema</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__Schema">
            <summary>
            The <c>__Schema</c> introspection type allows querying the schema for available types and directives.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Schema.#ctor">
            <summary>
            Initializes a new instance of the <c>__Schema</c> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeKind">
            <summary>
            An enumeration representing a kind of GraphQL type.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.SCALAR">
            <summary>
            Indicates this type is a scalar.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.OBJECT">
            <summary>
            Indicates this type is an object. `fields` and `possibleTypes` are valid fields.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.INTERFACE">
            <summary>
            Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.UNION">
            <summary>
            Indicates this type is a union. `possibleTypes` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.ENUM">
            <summary>
            Indicates this type is an enum. `enumValues` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.INPUT_OBJECT">
            <summary>
            Indicates this type is an input object. `inputFields` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.LIST">
            <summary>
            Indicates this type is a list. `ofType` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.NON_NULL">
            <summary>
            Indicates this type is a non-null. `ofType` is a valid field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeKindBoxed">
            <summary>
            Shared and already boxed instances of <see cref="T:GraphQL.Introspection.TypeKind"/> to avoid further boxing at runtime.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeMetaFieldType">
            <summary>
            The <c>__type</c> meta-field is available on the root of a query operation and
            returns a <c>__Type</c> graph type for a specified graph type name.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.TypeMetaFieldType.#ctor">
            <summary>
            Initializes a new instance of the <c>__type</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeNameMetaFieldType">
            <summary>
            The <c>__typename</c> meta-field is available on every type and
            returns the name of the type on which it was requested.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.TypeNameMetaFieldType.#ctor">
            <summary>
            Initializes a new instance of the <c>__typename</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__Directive">
            <summary>
            The <c>__Directive</c> introspection type represents a directive that a server supports.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Directive.#ctor">
            <summary>
            Initializes a new instance of the <c>__Directive</c> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__DirectiveLocation">
            <summary>
            An enumeration representing a location that a directive may be placed.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__DirectiveLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__DirectiveLocation"/> graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__EnumValue">
            <summary>
            The <c>__EnumValue</c> introspection type represents one of possible values of an enum.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__EnumValue.#ctor">
            <summary>
            Initializes a new instance of the <c>__EnumValue</c> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__Field">
            <summary>
            The <c>__Field</c> introspection type represents each field in an Object or Interface type.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Field.#ctor">
            <summary>
            Initializes a new instance of the <c>__Field</c> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__InputValue">
            <summary>
            The <c>__InputValue</c> introspection type represents field and directive arguments as well as the inputFields of an input object.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__InputValue.#ctor">
            <summary>
            Initializes a new instance of the <c>__InputValue</c> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__Type">
            <summary>
            <c>__Type</c> is at the core of the type introspection system.
            It represents scalars, interfaces, object types, unions, enums in the system.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Type.#ctor">
            <summary>
            Initializes a new instance of the <c>__Type</c> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__TypeKind">
            <summary>
            An enumeration representing a kind of GraphQL type.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__TypeKind.#ctor">
            <summary>
            Initializes a new instance of the <c>__TypeKind</c> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.AbstractNode">
            <summary>
            Represents a node within a document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.AbstractNode.Comment">
            <summary>
            Returns the comment associated with the node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.AbstractNode.CommentNode">
            <summary>
            Returns the comment node associated with the node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.AbstractNode.Children">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Language.AST.AbstractNode.SourceLocation">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.AbstractNode.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Argument">
            <summary>
            Represents an argument node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Argument.#ctor">
            <summary>
            Initializes a new instance of an argument node.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Argument.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new instance of an argument node with the specified properties.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Argument.Name">
            <summary>
            Returns the name of this argument.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Argument.NameNode">
            <summary>
            Returns a <see cref="P:GraphQL.Language.AST.Argument.NameNode"/> containing the name of this argument.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Argument.Value">
            <summary>
            Returns the value node for this argument.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Argument.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Argument.ToString">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Language.AST.Argument.Equals(GraphQL.Language.AST.Argument)">
            <summary>
            Compares another node to this node by name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Argument.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Arguments">
            <summary>
            Represents a list of argument nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Arguments.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Arguments.Add(GraphQL.Language.AST.Argument)">
            <summary>
            Adds an argument node to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Arguments.ValueFor(System.String)">
            <summary>
            Returns the value of an argument node, searching the list of argument nodes by the name of the argument.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Arguments.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Arguments.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:GraphQL.Language.AST.Arguments.ToString">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Language.AST.CommentNode">
            <summary>
            Represents a comment node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.CommentNode.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified comment value.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.CommentNode.Value">
            <summary>
            Returns the comment stored in this node.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.CommentNode.Equals(GraphQL.Language.AST.CommentNode)">
            <summary>
            Compares this instance to another <see cref="T:GraphQL.Language.AST.CommentNode"/> by comment value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.CommentNode.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Directive">
            <summary>
            Represents a directive node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Directive.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new instance of a directive node with the specified parameters.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directive.Name">
            <summary>
            Returns the name of this directive.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directive.NameNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.Directive.NameNode"/> which contains the name of this directive.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directive.Arguments">
            <summary>
            Returns the node containing a list of argument nodes for this directive.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directive.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directive.ToString">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Language.AST.Directive.Equals(GraphQL.Language.AST.Directive)">
            <summary>
            Compares this instance with another instance by name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Directive.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Directives">
            <summary>
            Represents a node containing a list of directive nodes within a document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directives.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.Add(GraphQL.Language.AST.Directive)">
            <summary>
            Adds a directive node to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.Find(System.String)">
            <summary>
            Searches the list for a directive node specified by name and returns it.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directives.Count">
            <summary>
            Returns the number of directive nodes in this list.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directives.HasDuplicates">
            <summary>
            Returns <see langword="true"/> if there are any duplicate directive nodes in this list when compared by name.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Directives.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.Clear">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.Contains(GraphQL.Language.AST.Directive)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.CopyTo(GraphQL.Language.AST.Directive[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.Remove(GraphQL.Language.AST.Directive)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Directives.ToString">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Language.AST.Document">
            <summary>
            Represents the root node of a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Document.#ctor">
            <summary>
            Initializes a new instance with no children.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Document.OriginalQuery">
            <summary>
            Gets or sets the query before being parsed into an AST document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Document.Children">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Language.AST.Document.Operations">
            <summary>
            Returns a list of operation nodes for this document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Document.Fragments">
            <summary>
            Returns a list of fragment nodes for this document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Document.AddDefinition(GraphQL.Language.AST.IDefinition)">
            <summary>
            Adds a <see cref="T:GraphQL.Language.AST.FragmentDefinition"/> or <see cref="T:GraphQL.Language.AST.Operation"/> node to this document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Document.ToString">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Language.AST.Document.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Field">
            <summary>
            Represents a field selection node of a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Field.#ctor">
            <summary>
            Initializes a new instance of a field selection node.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Field.#ctor(GraphQL.Language.AST.NameNode,GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new instance of a field selection node with the specified parameters.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Field.Name">
            <summary>
            Returns the name of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Field.NameNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.Field.NameNode"/> containing the name of this field.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Field.Alias">
            <summary>
            Returns the alias for this field, if any.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Field.AliasNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.Field.NameNode"/> containing the alias of this field, if any.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Field.Directives">
            <summary>
            Gets or sets a list of directive nodes for this field selection node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Field.Arguments">
            <summary>
            Gets or sets a list of argument nodes for this field selection node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Field.SelectionSet">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Language.AST.Field.Children">
            <summary>
            Returns the argument nodes, directive nodes, and child fields selection nodes contained within this field selection node.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Field.ToString">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Language.AST.Field.Equals(GraphQL.Language.AST.Field)">
            <summary>
            Determines if this instance is equal to another instance by comparing the <see cref="P:GraphQL.Language.AST.Field.Name"/> and <see cref="P:GraphQL.Language.AST.Field.Alias"/> properties.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Field.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Field.MergeSelectionSet(GraphQL.Language.AST.Field)">
            <summary>
            Returns a new field selection node with the child field selection nodes merged with another field's child field selection nodes.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.Fields">
            <summary>
            Represents a list of field nodes within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Fields.Empty">
            <summary>
            Returns a new instance that contains no field nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Fields.Add(GraphQL.Language.AST.Field)">
            <summary>
            Adds a field node to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Fields.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.FragmentDefinition">
            <summary>
            Represents a fragment definition node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentDefinition.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new fragment definition node with the specified <see cref="P:GraphQL.Language.AST.FragmentDefinition.NameNode"/> containing the name of this fragment definition.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentDefinition.Name">
            <summary>
            Returns the name of this fragment definition.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentDefinition.NameNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.FragmentDefinition.NameNode"/> containing the name of this fragment definition.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentDefinition.Type">
            <summary>
            Gets or sets the type node representing the graph type of this fragment definition.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentDefinition.Directives">
            <summary>
            Gets or sets a list of directives applied to this fragment definition node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentDefinition.SelectionSet">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentDefinition.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentDefinition.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentDefinition.Equals(GraphQL.Language.AST.FragmentDefinition)">
            <summary>
            Compares this instance to another instance by name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentDefinition.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Fragments">
            <summary>
            Represents a list of fragment definition nodes within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Fragments.Add(GraphQL.Language.AST.FragmentDefinition)">
            <summary>
            Adds a fragment definition node to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Fragments.FindDefinition(System.String)">
            <summary>
            Searches the list by name and returns the first matching fragment definition, or <see langword="null"/> if none is found.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Fragments.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.FragmentSpread">
            <summary>
            Represents a fragment spread node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentSpread.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new instance with the specified <see cref="P:GraphQL.Language.AST.FragmentSpread.NameNode"/> containing the name of this fragment spread node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentSpread.Name">
            <summary>
            Returns the name of this fragment spread.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentSpread.NameNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.FragmentSpread.NameNode"/> containing the name of this fragment spread.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentSpread.Directives">
            <summary>
            Gets or sets a list of directive nodes that apply to this fragment spread node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.FragmentSpread.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentSpread.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentSpread.Equals(GraphQL.Language.AST.FragmentSpread)">
            <summary>
            Compares this instance to another instance by name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.FragmentSpread.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.IDefinition">
            <summary>
            Represents a fragment definition node or an operation node.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.IFragment">
            <summary>
            Represents a fragment spread node or an inline fragment node.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.IHaveSelectionSet">
            <summary>
            Represents a node that has child field selection nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.IHaveSelectionSet.SelectionSet">
            <summary>
            Gets or sets a list of child field selection nodes for this node.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.InlineFragment">
            <summary>
            Represents an inline fragment node within a document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.InlineFragment.Type">
            <summary>
            Gets or sets the named type node of this fragment.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.InlineFragment.Directives">
            <summary>
            Gets or set a list of directives that apply to this fragment.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.InlineFragment.SelectionSet">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Language.AST.InlineFragment.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.InlineFragment.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.InlineFragment.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.INode">
            <summary>
            Represents a node within a document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.INode.Children">
            <summary>
            Returns a list of children nodes. If the node doesn't have children, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.INode.SourceLocation">
            <summary>
            Returns the node's location within the source document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.INode.IsEqualTo(GraphQL.Language.AST.INode)">
            <summary>
            Determines if the node is equal to another node.
            This typically returns <see langword="true"/> if the node type and the node name matches.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.ISelection">
            <summary>
            Represents a field node or fragment node within a document.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.IType">
            <summary>
            Represents a type node within a document. This could be a named type, list type, or non-null type.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.IValue">
            <summary>
            Represents a value node within a document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.IValue.Value">
            <summary>
            Returns the value of the node.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.IValue`1">
            <inheritdoc cref="T:GraphQL.Language.AST.IValue"/>
        </member>
        <member name="P:GraphQL.Language.AST.IValue`1.Value">
            <inheritdoc cref="P:GraphQL.Language.AST.IValue.Value"/>
        </member>
        <member name="T:GraphQL.Language.AST.ListType">
            <summary>
            Represents a list type node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ListType.#ctor(GraphQL.Language.AST.IType)">
            <summary>
            Initializes a list type node that wraps the specified type node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ListType.Type">
            <summary>
            Returns the wrapped type node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ListType.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ListType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ListType.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.NamedType">
            <summary>
            Represents a named type node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.NamedType.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new named type node containing the specified <see cref="P:GraphQL.Language.AST.NamedType.NameNode"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.NamedType.Name">
            <summary>
            Returns the name of the named type node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.NamedType.NameNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.NamedType.NameNode"/> containing the name of the type.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.NamedType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.NamedType.Equals(GraphQL.Language.AST.NamedType)">
            <summary>
            Compares this instance to another instance by comparing the name of the type.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.NamedType.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.NameNode">
            <summary>
            Represents a name within a document. This could be the name of a field, type, argument, directive, alias, etc.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.NameNode.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified name.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.NameNode.Name">
            <summary>
            Returns the contained name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.NameNode.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.NonNullType">
            <summary>
            Represents a non-null type node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.NonNullType.#ctor(GraphQL.Language.AST.IType)">
            <summary>
            Initializes a new instance that wraps the specified type node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.NonNullType.Type">
            <summary>
            Returns the wrapped type node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.NonNullType.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.NonNullType.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.NonNullType.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.NullValue">
            <summary>
            Represents the 'null' value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.NullValue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.NullValue.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Operation">
            <summary>
            Represents an operation within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Operation.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new operation node with the specified <see cref="P:GraphQL.Language.AST.Operation.NameNode"/> containing the name of the operation, if any.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Operation.Name">
            <summary>
            Returns the name of the operation, if any.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Operation.NameNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.Operation.NameNode"/> containing the name of the operation, if any.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Operation.OperationType">
            <summary>
            Gets or sets the type of this operation.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Operation.Directives">
            <summary>
            Gets or sets a list of directive nodes for this operation.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Operation.Variables">
            <summary>
            Gets or sets a list of variable definition nodes for this operation.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Operation.SelectionSet">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Language.AST.Operation.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Operation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Operation.Equals(GraphQL.Language.AST.Operation)">
            <summary>
            Compares this instance to another instance by name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Operation.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Operations">
            <summary>
            Represents a list of operation nodes within a document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Operations.Count">
            <summary>
            Returns the number of operation nodes the list contains.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Operations.Add(GraphQL.Language.AST.Operation)">
            <summary>
            Adds an operation node to the list.
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:GraphQL.Language.AST.Operations.WithName(System.String)">
            <summary>
            Returns the first operation in the list that matches the specified name, or <see langword="null"/> if none are matched.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Operations.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.OperationType">
            <summary>
            An enumeration of the GraphQL operation types.
            </summary>
        </member>
        <member name="F:GraphQL.Language.AST.OperationType.Query">
            <summary>
            A query operation.
            </summary>
        </member>
        <member name="F:GraphQL.Language.AST.OperationType.Mutation">
            <summary>
            A mutation operation.
            </summary>
        </member>
        <member name="F:GraphQL.Language.AST.OperationType.Subscription">
            <summary>
            A subscription operation.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.SelectionSet">
            <summary>
            Represents a list of field nodes or fragment nodes selected to be returned.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SelectionSet.#ctor">
            <summary>
            Initializes a new instance with an empty list.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.SelectionSet.Selections">
            <summary>
            Returns the list of selected nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.SelectionSet.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.SelectionSet.Prepend(GraphQL.Language.AST.ISelection)">
            <summary>
            Adds a node to the start of the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SelectionSet.Add(GraphQL.Language.AST.ISelection)">
            <summary>
            Adds a node to the end of the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SelectionSet.Merge(GraphQL.Language.AST.SelectionSet)">
            <summary>
            Returns a new selection set node with the contents merged with another selection set node's contents.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SelectionSet.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.SelectionSet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.SourceLocation">
            <summary>
            Provides information regarding the location of a node within a document's original query text.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SourceLocation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.SourceLocation.Start">
            <summary>
            Returns the start position within the query text.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.SourceLocation.End">
            <summary>
            Returns the end position within the query text.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.SourceLocation.Line">
            <summary>
            Returns the line number within the query text.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.SourceLocation.Column">
            <summary>
            Returns the column number within the query text.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SourceLocation.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.SourceLocation.Equals(GraphQL.Language.AST.SourceLocation)">
            <summary>
            Compares this instance to another based on the line and column values.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SourceLocation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.SourceLocation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.BigIntValue">
            <summary>
            Represents a <see cref="T:System.Numerics.BigInteger"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.BigIntValue.#ctor(System.Numerics.BigInteger)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.BigIntValue.Equals(GraphQL.Language.AST.ValueNode{System.Numerics.BigInteger})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.BooleanValue">
            <summary>
            Represents a <see cref="T:System.Boolean"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.BooleanValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.BooleanValue.Equals(GraphQL.Language.AST.ValueNode{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.ByteValue">
            <summary>
            Represents a <see cref="T:System.Byte"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ByteValue.#ctor(System.Byte)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ByteValue.Equals(GraphQL.Language.AST.ValueNode{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.DateTimeOffsetValue">
            <summary>
            Represents a <see cref="T:System.DateTimeOffset"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.DateTimeOffsetValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.DateTimeOffsetValue.Equals(GraphQL.Language.AST.ValueNode{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.DateTimeValue">
            <summary>
            Represents a <see cref="T:System.DateTime"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.DateTimeValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.DateTimeValue.Equals(GraphQL.Language.AST.ValueNode{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.DecimalValue">
            <summary>
            Represents a <see cref="T:System.Decimal"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.DecimalValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.DecimalValue.Equals(GraphQL.Language.AST.ValueNode{System.Decimal})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.EnumValue">
            <summary>
            Represents an enumeration value (specified by a string) within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.EnumValue.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new instance with a <see cref="P:GraphQL.Language.AST.EnumValue.NameNode"/> containing a string representation of the enumeration value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.EnumValue.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified string representation of the enumeration value.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.EnumValue.Name">
            <summary>
            Returns the string representation of the enumeration value.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.EnumValue.NameNode">
            <summary>
            Returns a <see cref="P:GraphQL.Language.AST.EnumValue.NameNode"/> containing the string representation of the enumeration value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.EnumValue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.EnumValue.Equals(GraphQL.Language.AST.EnumValue)">
            <summary>
            Compares this instance to another instance by comparing the string representation of the enumeration value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.EnumValue.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.FloatValue">
            <summary>
            Represents a <see cref="T:System.Double"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.FloatValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.FloatValue.Equals(GraphQL.Language.AST.ValueNode{System.Double})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.GuidValue">
            <summary>
            Represents a <see cref="T:System.Guid"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.GuidValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.GuidValue.Equals(GraphQL.Language.AST.ValueNode{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.IntValue">
            <summary>
            Represents a <see cref="T:System.Int32"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.IntValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.IntValue.Equals(GraphQL.Language.AST.ValueNode{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.ListValue">
            <summary>
            Represents a list of value nodes, expressed as a value node itself, within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ListValue.#ctor(System.Collections.Generic.IEnumerable{GraphQL.Language.AST.IValue})">
            <summary>
            Initializes a new instance with the specified list of values.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ListValue.Value">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1">List&lt;object&gt;</see> containing the values of the list.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ListValue.Values">
            <summary>
            Returns a list of the child value nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ListValue.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ListValue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ListValue.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.LongValue">
            <summary>
            Represents a <see cref="T:System.Int64"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.LongValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.LongValue.Equals(GraphQL.Language.AST.ValueNode{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.ObjectField">
            <summary>
            Represents the child field node of an object value node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectField.#ctor(GraphQL.Language.AST.NameNode,GraphQL.Language.AST.IValue)">
            <summary>
            Initializes a new instance for the specified field name and value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectField.#ctor(System.String,GraphQL.Language.AST.IValue)">
            <summary>
            Initializes a new instance for the specified field name and value.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectField.Name">
            <summary>
            Returns the name of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectField.NameNode">
            <summary>
            Returns the <see cref="P:GraphQL.Language.AST.ObjectField.NameNode"/> containing the name of the field, if initialized with the <see cref="M:GraphQL.Language.AST.ObjectField.#ctor(GraphQL.Language.AST.NameNode,GraphQL.Language.AST.IValue)"/> constructor.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectField.Value">
            <summary>
            Returns the value node containing the value of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectField.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectField.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectField.Equals(GraphQL.Language.AST.ObjectField)">
            <summary>
            Compares this instance to another instance by name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectField.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.ObjectValue">
            <summary>
            Represents a complex value within a document that has child fields (an object).
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectValue.#ctor(System.Collections.Generic.IEnumerable{GraphQL.Language.AST.ObjectField})">
            <summary>
            Initializes a new instance that contains the specified field nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectValue.Value">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.Dictionary`2">Dictionary&lt;string, object&gt;</see>
            containing the values of the field nodes that this object value node contains.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectValue.ObjectFields">
            <summary>
            Returns the field value nodes that are contained within this object value node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectValue.FieldNames">
            <summary>
            Returns a list of the names of the fields specified for this object value node.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ObjectValue.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectValue.Field(System.String)">
            <summary>
            Returns the first matching field node contained within this object value node that matches the specified name, or <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectValue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ObjectValue.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.SByteValue">
            <summary>
            Represents a <see cref="T:System.SByte"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SByteValue.#ctor(System.SByte)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.SByteValue.Equals(GraphQL.Language.AST.ValueNode{System.SByte})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.ShortValue">
            <summary>
            Represents a <see cref="T:System.Int16"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ShortValue.#ctor(System.Int16)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ShortValue.Equals(GraphQL.Language.AST.ValueNode{System.Int16})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.StringValue">
            <summary>
            Represents a <see cref="T:System.String"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.StringValue.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.StringValue.Equals(GraphQL.Language.AST.ValueNode{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.TimeSpanValue">
            <summary>
            Represents a <see cref="T:System.TimeSpan"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.TimeSpanValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.TimeSpanValue.Equals(GraphQL.Language.AST.ValueNode{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.UIntValue">
            <summary>
            Represents a <see cref="T:System.UInt32"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.UIntValue.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.UIntValue.Equals(GraphQL.Language.AST.ValueNode{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.ULongValue">
            <summary>
            Represents a <see cref="T:System.UInt64"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ULongValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.ULongValue.Equals(GraphQL.Language.AST.ValueNode{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.UriValue">
            <summary>
            Represents a <see cref="T:System.Uri"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.UriValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.UriValue.Equals(GraphQL.Language.AST.ValueNode{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.UShortValue">
            <summary>
            Represents a <see cref="T:System.UInt16"/> value within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.UShortValue.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.UShortValue.Equals(GraphQL.Language.AST.ValueNode{System.UInt16})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.ValueNode`1">
            <summary>
            Represents a value node which contains a literal value within a document.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.ValueNode`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ValueNode`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ValueNode`1.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.ValueNode`1.Equals(GraphQL.Language.AST.ValueNode{`0})">
            <summary>
            Compares the value of this instance to another instance.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.Variable">
            <summary>
            Represents a variable name and value tuple that has been gathered from the document and attached <see cref="T:GraphQL.Inputs"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Variable.Name">
            <summary>
            Gets or sets the name of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Variable.Value">
            <summary>
            Gets or sets the value of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.Variable.ValueSpecified">
            <summary>
            Indicates if the variable value has been set.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AST.VariableDefinition">
            <summary>
            Represents a variable definition node within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinition.#ctor">
            <summary>
            Initializes a new variable definition node.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinition.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new variable definition node with the specified <see cref="P:GraphQL.Language.AST.VariableDefinition.NameNode"/> containing the name of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.VariableDefinition.Name">
            <summary>
            Returns the name of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.VariableDefinition.NameNode">
            <summary>
            Gets or sets the <see cref="P:GraphQL.Language.AST.VariableDefinition.NameNode"/> containing the name of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.VariableDefinition.Type">
            <summary>
            Returns the type node representing the graph type of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.VariableDefinition.DefaultValue">
            <summary>
            Returns a value node representing the default value of the variable.
            Returns <see langword="null"/> if the variable has no default value. 
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.VariableDefinition.Children">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinition.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinition.Equals(GraphQL.Language.AST.VariableDefinition)">
            <summary>
            Compares this instance to another instance by name.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinition.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.VariableDefinitions">
            <summary>
            Represents a list of variable definition nodes within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinitions.Add(GraphQL.Language.AST.VariableDefinition)">
            <summary>
            Adds a variable definition node to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinitions.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.VariableDefinitions.ToString">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.VariableReference">
            <summary>
            Represents a value node that represents a reference to a variable within a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableReference.#ctor(GraphQL.Language.AST.NameNode)">
            <summary>
            Initializes a new instance with the specified <see cref="P:GraphQL.Language.AST.VariableReference.NameNode"/> containing the name of the variable being referenced.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.VariableReference.Name">
            <summary>
            Returns the name of the variable being referenced.
            </summary>
        </member>
        <member name="P:GraphQL.Language.AST.VariableReference.NameNode">
            <summary>
            Returns a <see cref="P:GraphQL.Language.AST.VariableReference.NameNode"/> containing the name of the variable being referenced.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.VariableReference.Equals(GraphQL.Language.AST.VariableReference)">
            <summary>
            Compares this instance to another instance by comparing the name of the variable that is referenced.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.VariableReference.IsEqualTo(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.AST.Variables">
            <summary>
            Contains a list of variables (name &amp; value tuples) that have been gathered from the document and attached <see cref="T:GraphQL.Inputs"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Variables.Add(GraphQL.Language.AST.Variable)">
            <summary>
            Adds a variable to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Variables.ValueFor(System.String,System.Object)">
            <summary>
            Returns the first variable with a matching name, or <paramref name="defaultValue"/> if none are found.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AST.Variables.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Language.AST.Variables.ToString">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Language.CoreToVanillaConverter">
            <summary>
            Converts an GraphQLParser AST representation of a document into a GraphQL.NET AST
            representation of a document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Convert(System.String,GraphQLParser.AST.GraphQLDocument)">
            <summary>
            Converts an GraphQLParser AST representation of a document into a GraphQL.NET AST
            representation of a document and returns it.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.AddDefinitions(GraphQLParser.AST.GraphQLDocument,GraphQL.Language.AST.Document)">
            <summary>
            Enumerates the operations and fragments in the source document and adds them to the target document.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Operation(GraphQLParser.AST.GraphQLOperationDefinition)">
            <summary>
            Converts an operation node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Fragment(GraphQLParser.AST.GraphQLFragmentDefinition)">
            <summary>
            Converts a fragment definition node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.FragmentSpread(GraphQLParser.AST.GraphQLFragmentSpread)">
            <summary>
            Converts a fragment spread node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.InlineFragment(GraphQLParser.AST.GraphQLInlineFragment)">
            <summary>
            Converts an inline fragment node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.VariableDefinitions(System.Collections.Generic.IEnumerable{GraphQLParser.AST.GraphQLVariableDefinition})">
            <summary>
            Converts a list of variable definition nodes and their children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.VariableDefinition(GraphQLParser.AST.GraphQLVariableDefinition)">
            <summary>
            Converts a variable definition node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.SelectionSet(GraphQLParser.AST.GraphQLSelectionSet)">
            <summary>
            Converts a selection set node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Selection(GraphQLParser.AST.ASTNode)">
            <summary>
            Converts a selection node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Field(GraphQLParser.AST.GraphQLFieldSelection)">
            <summary>
            Converts a field node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Directives(System.Collections.Generic.IEnumerable{GraphQLParser.AST.GraphQLDirective})">
            <summary>
            Converts a list of directive nodes and their children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Directive(GraphQLParser.AST.GraphQLDirective)">
            <summary>
            Converts a directive node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Arguments(System.Collections.Generic.IEnumerable{GraphQLParser.AST.GraphQLArgument})">
            <summary>
            Converts a list of argument nodes and their children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Value(GraphQLParser.AST.GraphQLValue)">
            <summary>
            Converts a value node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.ObjectField(GraphQLParser.AST.GraphQLObjectField)">
            <summary>
            Converts and object field node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.NamedType(GraphQLParser.AST.GraphQLNamedType)">
            <summary>
            Converts a named type node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Type(GraphQLParser.AST.GraphQLType)">
            <summary>
            Converts a type node and its children.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Name(GraphQLParser.AST.GraphQLName)">
            <summary>
            Converts a name node.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.Comment(GraphQLParser.AST.GraphQLComment)">
            <summary>
            Converts a comment node.
            </summary>
        </member>
        <member name="M:GraphQL.Language.CoreToVanillaConverter.ToOperationType(GraphQLParser.AST.OperationType)">
            <summary>
            Converts an operation type enumeration value.
            </summary>
        </member>
        <member name="T:GraphQL.Language.AstNodeExtensions">
            <summary>
            Provides helper methods for converting GraphQLParser AST documents to GraphQL.NET AST documents.
            </summary>
        </member>
        <member name="M:GraphQL.Language.AstNodeExtensions.WithLocation``1(``0,GraphQLParser.AST.ASTNode)">
            <summary>
            Copies the source location information from <paramref name="astNode"/> to <paramref name="node"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Language.NodeExtensions">
            <summary>
            Provides helper methods for setting location information on document nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Language.NodeExtensions.WithLocation``1(``0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets location information on a specified node and then returns the node.
            </summary>
        </member>
        <member name="T:GraphQL.LightweightCache`2">
            <summary>
            A simple cache based on the provided dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <remarks>https://github.com/JasperFx/baseline/blob/master/src/Baseline/LightweightCache.cs</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
            <param name="onMissing">Action to perform if the key is missing. Defaults to <see cref="T:System.Collections.Generic.KeyNotFoundException"/></param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
            <param name="dictionary">The dictionary implementation to use.</param>
            <param name="onMissing">Action to perform if the key is missing. Defaults to <see cref="T:System.Collections.Generic.KeyNotFoundException"/></param>
            <remarks>This takes a dependency on the provided dictionary. It does not simply copy its values.</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
            <param name="dictionary">The dictionary implementation to use.</param>
            <remarks>This takes a dependency on the provided dictionary. It does not simply copy its values.</remarks>
        </member>
        <member name="P:GraphQL.LightweightCache`2.OnMissing">
            <summary>
            Action to perform if the key is missing. Defaults to <see cref="T:System.Collections.Generic.KeyNotFoundException"/>
            </summary>
        </member>
        <member name="P:GraphQL.LightweightCache`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:GraphQL.LightweightCache`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:GraphQL.LightweightCache`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the values.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:GraphQL.LightweightCache`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the values.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:GraphQL.LightweightCache`2.FillDefault(`0)">
            <summary>
            Guarantees that the Cache has a value for a given key.
            If it does not already exist, it's created using the OnMissing action.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Fill(`0,`1)">
            <summary>
            Guarantees that the Cache has a value for a given key.
            If it does not already exist, it's created using provided default value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The default value.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.TryRetrieve(`0,`1@)">
            <summary>
            Tries the retrieve a given key.
            </summary>
            <param name="key">The key to retrieve.</param>
            <param name="value">The value for the associated key or <c>default(TValue)</c>.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Each(System.Action{`1})">
            <summary>
            Performs the specified action for each value.
            </summary>
            <param name="action">The action to be performed.</param>
            <remarks>The order of execution is non-deterministic. If an error occurs, the action will not be performed on the remaining values.</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Each(System.Action{`0,`1})">
            <summary>
            Performs the specified action for each key/value pair.
            </summary>
            <param name="action">The action to be performed.</param>
            <remarks>The order of execution is non-deterministic. If an error occurs, the action will not be performed on the remaining values.</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Has(`0)">
            <summary>
            Equivalent to ContainsKey
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Exists(System.Predicate{`1})">
            <summary>
            Determines if a given value exists in the dictionary.
            </summary>
            <param name="predicate">The search predicate.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Find(System.Predicate{`1})">
            <summary>
            Searches for a given value.
            </summary>
            <param name="predicate">The search predicate.</param>
            <returns>The first matching value</returns>
        </member>
        <member name="M:GraphQL.LightweightCache`2.GetAll">
            <summary>
            Returns all values as an array
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Clear">
            <summary>
            Clears this instance of all key/value pairs.
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.WithValue(`0,System.Action{`1})">
            <summary>
            If the dictionary contains the indicated key, performs the action with its value.
            </summary>
            <param name="key">The key.</param>
            <param name="action">The action to be performed.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.ClearAll">
            <summary>
            Equivalent to Clear()
            </summary>
        </member>
        <member name="T:GraphQL.ObjectExtensions">
            <summary>
            Provides extension methods for objects and a method for converting a dictionary into a strongly typed object.
            </summary>
        </member>
        <member name="M:GraphQL.ObjectExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance of the indicated type, populating it with the dictionary.
            </summary>
            <typeparam name="T">The type to create.</typeparam>
            <param name="source">The source of values.</param>
            <returns>T.</returns>
        </member>
        <member name="M:GraphQL.ObjectExtensions.ToObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,GraphQL.Types.IGraphType)">
            <summary>
            Creates a new instance of the indicated type, populating it with the dictionary.
            Can use any constructor of the indicated type, provided that there are keys in the
            dictionary that correspond (case sensitive) to the names of the constructor parameters.
            </summary>
            <param name="source">The source of values.</param>
            <param name="type">The type to create.</param>
            <param name="mappedType">
            GraphType for matching dictionary keys with <paramref name="type"/> property names.
            GraphType contains information about this matching in Metadata property.
            In case of configuring field as Field(x => x.FName).Name("FirstName") source dictionary
            will have 'FirstName' key but its value should be set to 'FName' property of created object.
            </param>
        </member>
        <member name="M:GraphQL.ObjectExtensions.GetPropertyValue(System.Object,System.Type,GraphQL.Types.IGraphType)">
            <summary>
            Converts the indicated value into a type that is compatible with fieldType.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <param name="fieldType">The desired type.</param>
            <param name="mappedType">
            GraphType for matching dictionary keys with <paramref name="fieldType"/> property names.
            GraphType contains information about this matching in Metadata property.
            In case of configuring field as Field(x => x.FName).Name("FirstName") source dictionary
            will have 'FirstName' key but its value should be set to 'FName' property of created object.
            </param>
            <remarks>There is special handling for strings, IEnumerable&lt;T&gt;, Nullable&lt;T&gt;, and Enum.</remarks>
        </member>
        <member name="M:GraphQL.ObjectExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of the named property.
            </summary>
            <param name="obj">The object to be read.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:GraphQL.ObjectExtensions.GetInterface(System.Type,System.String)">
            <summary>
            Returns an interface implemented by the indicated type whose name matches the desired name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="name">The name of the desired interface. This is case sensitive.</param>
            <returns>The interface, or <c>null</c> if no matches were found.</returns>
            <remarks>If more than one interface matches, the returned interface is non-deterministic.</remarks>
        </member>
        <member name="M:GraphQL.ObjectExtensions.IsDefinedEnumValue(System.Type,System.Object)">
            <summary>
            Returns true is the value is null, value.ToString equals an empty string, or the value can be converted into a named enum value.
            </summary>
            <param name="type">An enum type.</param>
            <param name="value">The value being tested.</param>
        </member>
        <member name="T:GraphQL.Reflection.IAccessor">
            <summary>
            An abstraction around accessing a property or method on a object instance.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.FieldName">
            <summary>
            Returns the name of the member that this accessor points to.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.ReturnType">
            <summary>
            Returns the data type that the member returns.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.DeclaringType">
            <summary>
            Returns the type where the member is defined.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.Parameters">
            <summary>
            For methods, returns a list of parameters defined for the method, otherwise null.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.MethodInfo">
            <summary>
            Returns a <see cref="P:GraphQL.Reflection.IAccessor.MethodInfo"/> instance that points to the member.
            For properties, this points to the property getter.
            </summary>
        </member>
        <member name="M:GraphQL.Reflection.IAccessor.GetValue(System.Object,System.Object[])">
            <summary>
            Get return value of method or property.
            </summary>
            <param name="target">Target object.</param>
            <param name="arguments">Arguments for method; not used for property.</param>
            <returns>Return value.</returns>
        </member>
        <member name="M:GraphQL.Reflection.IAccessor.GetAttributes``1">
            <summary>
            Returns a list of attributes of the specified type defined on the member.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
        </member>
        <member name="M:GraphQL.Reflection.ReflectionHelper.ToAccessor(System.Type,System.String,GraphQL.ResolverType)">
            <summary>
            Creates an Accessor for the indicated GraphQL field
            </summary>
            <param name="type">The type to check.</param>
            <param name="field">The desired field.</param>
            <param name="resolverType">defaults to Resolver</param>
        </member>
        <member name="M:GraphQL.Reflection.ReflectionHelper.MethodForField(System.Type,System.String,GraphQL.ResolverType)">
            <summary>
            Returns the method associated with the indicated GraphQL field
            </summary>
            <param name="type">The type to check.</param>
            <param name="field">The desired field.</param>
            <param name="resolverType">Indicates if a resolver or subscriber method is requested.</param>
        </member>
        <member name="M:GraphQL.Reflection.ReflectionHelper.PropertyForField(System.Type,System.String)">
            <summary>
            Returns the property associated with the indicated GraphQL field
            </summary>
            <param name="type">The type to check.</param>
            <param name="field">The desired field.</param>
        </member>
        <member name="T:GraphQL.IResolveFieldContext">
            <summary>
            Contains parameters pertaining to the currently executing <see cref="T:GraphQL.Resolvers.IFieldResolver"/>.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.FieldName">
            <summary>The name of the field being resolved.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.FieldAst">
            <summary>The <see cref="T:GraphQL.Language.AST.Field"/> AST as derived from the query request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.FieldDefinition">
            <summary>The <see cref="T:GraphQL.Types.FieldType"/> definition specified in the parent graph type.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.ReturnType">
            <summary>The return value's graph type.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.ParentType">
            <summary>The field's parent graph type.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Arguments">
            <summary>
            A dictionary of arguments passed to the field. It is recommended to use the
            <see cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">GetArgument</see>
            and <see cref="M:GraphQL.ResolveFieldContextExtensions.HasArgument(GraphQL.IResolveFieldContext,System.String)">HasArgument</see> extension
            methods rather than this dictionary, so the names can be converted by the selected <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.RootValue">
            <summary>The root value of the graph, as defined by <see cref="P:GraphQL.ExecutionOptions.Root"/>.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Source">
            <summary>The value of the parent object in the graph.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Schema">
            <summary>The graph schema.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Document">
            <summary>The current GraphQL request, parsed into an AST document.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Operation">
            <summary>The operation type (i.e. query, mutation, or subscription) of the current GraphQL request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Fragments">
            <summary>Returns the query fragments associated with the current GraphQL request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Variables">
            <summary>The input variables of the current GraphQL request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.CancellationToken">
            <summary>A <see cref="T:System.Threading.CancellationToken">CancellationToken</see> to indicate if and when the request has been canceled.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Metrics">
            <summary>Allows logging of performance metrics.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Errors">
            <summary>Can be used to return specific errors back to the GraphQL request caller.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Path">
            <summary>The path to the current executing field from the request root as it would appear in the query.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.ResponsePath">
            <summary>The path to the current executing field from the request root as it would appear in the response.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.SubFields">
            <summary>Returns a list of child fields requested for the current field.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Extensions">
            <summary>
            The response map may also contain an entry with key extensions. This entry is reserved for implementors to extend the
            protocol however they see fit, and hence there are no additional restrictions on its contents. This dictionary is shared
            by all running resolvers and is not thread safe. Also you may use <see cref="M:GraphQL.ResolveFieldContextExtensions.GetExtension(GraphQL.IResolveFieldContext,System.String)">GetExtension</see>
            and <see cref="M:GraphQL.ResolveFieldContextExtensions.SetExtension(GraphQL.IResolveFieldContext,System.String,System.Object)">SetExtension</see>
            methods.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.RequestServices">
            <summary>The service provider for the executing request.</summary>
        </member>
        <member name="T:GraphQL.IResolveFieldContext`1">
            <inheritdoc cref="T:GraphQL.IResolveFieldContext"/>
        </member>
        <member name="P:GraphQL.IResolveFieldContext`1.Source">
            <inheritdoc cref="P:GraphQL.IResolveFieldContext.Source"/>
        </member>
        <member name="T:GraphQL.ReadonlyResolveFieldContext">
            <summary>
            A readonly implementation of <see cref="T:GraphQL.IResolveFieldContext"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ReadonlyResolveFieldContext.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Execution.ExecutionContext)">
            <summary>
            Initializes an instance with the specified <see cref="T:GraphQL.Execution.ExecutionNode"/> and <see cref="T:GraphQL.Execution.ExecutionContext"/>.
            </summary>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Source">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.FieldName">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.FieldAst">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.FieldDefinition">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.ParentType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Arguments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.RootValue">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Schema">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Document">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Operation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Fragments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Variables">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Metrics">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Errors">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Path">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.ResponsePath">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.SubFields">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Extensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.RequestServices">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.ResolveFieldContext">
            <summary>
            A mutable implementation of <see cref="T:GraphQL.IResolveFieldContext"/>
            </summary>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.FieldName">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.FieldAst">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.FieldDefinition">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.ParentType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Arguments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.RootValue">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Source">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Schema">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Document">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Operation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Fragments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Variables">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Metrics">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Errors">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Path">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.ResponsePath">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.SubFields">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.RequestServices">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Extensions">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.ResolveFieldContext.#ctor">
            <summary>
            Initializes a new instance with all fields set to their default values.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContext.#ctor(GraphQL.IResolveFieldContext)">
            <summary>
            Clone the specified <see cref="T:GraphQL.IResolveFieldContext"/>.
            </summary>
        </member>
        <member name="T:GraphQL.ResolveFieldContext`1">
            <inheritdoc cref="T:GraphQL.ResolveFieldContext"/>
        </member>
        <member name="M:GraphQL.ResolveFieldContext`1.#ctor">
            <inheritdoc cref="M:GraphQL.ResolveFieldContext.#ctor"/>
        </member>
        <member name="M:GraphQL.ResolveFieldContext`1.#ctor(GraphQL.IResolveFieldContext)">
            <summary>
            Clone the specified <see cref="T:GraphQL.IResolveFieldContext"/>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property cannot be cast to <typeparamref name="TSource"/></exception>
        </member>
        <member name="P:GraphQL.ResolveFieldContext`1.Source">
            <inheritdoc cref="P:GraphQL.ResolveFieldContext.Source"/>
        </member>
        <member name="M:GraphQL.ResolveFieldContextAdapter`1.#ctor(GraphQL.IResolveFieldContext)">
            <summary>
            Creates an instance that maps to the specified base <see cref="T:GraphQL.IResolveFieldContext"/>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property cannot be cast to the specified type</exception>
        </member>
        <member name="T:GraphQL.ResolveFieldContextExtensions">
            <summary>
            Provides extension methods for <see cref="T:GraphQL.IResolveFieldContext"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">
            <summary>Returns the value of the specified field argument, or defaultValue if none found</summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetArgument(GraphQL.IResolveFieldContext,System.Type,System.String,System.Object)">
            <summary>Returns the value of the specified field argument, or defaultValue if none found</summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.HasArgument(GraphQL.IResolveFieldContext,System.String)">
            <summary>Determines if the specified field argument has been provided in the GraphQL query request</summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.IsIntrospectionType(GraphQL.Types.IGraphType)">
            <summary>
            Determines if this graph type is an introspection type
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.IsIntrospectionField(GraphQL.Types.FieldType)">
            <summary>
            Determines if this field is an introspection field (__schema, __type, __typename) -- but not if it is a field of an introspection type
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.As``1(GraphQL.IResolveFieldContext)">
            <summary>Returns the <see cref="T:GraphQL.IResolveFieldContext"/> typed as an <see cref="T:GraphQL.IResolveFieldContext`1"/></summary>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property cannot be cast to the specified type</exception>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.As``1(GraphQL.Subscription.IResolveEventStreamContext)">
            <summary>Returns the <see cref="T:GraphQL.Subscription.IResolveEventStreamContext"/> typed as an <see cref="T:GraphQL.Subscription.IResolveEventStreamContext`1"/></summary>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property cannot be cast to the specified type</exception>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetExtension(GraphQL.IResolveFieldContext,System.String)">
            <summary>
            Thread safe method to get value by path (key1.key2.keyN) from extensions dictionary.
            </summary>
            <param name="context">Context with extensions response map.</param>
            <param name="path">Path to value in key1.key2.keyN format.</param>
            <returns>Value, if any exists on the specified path, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.SetExtension(GraphQL.IResolveFieldContext,System.String,System.Object)">
            <summary>
            Thread safe method to set value by path (key1.key2.keyN) to extensions dictionary.
            if the given path or its part contains values, then they will be overwritten.
            </summary>
            <param name="context">Context with extensions response map.</param>
            <param name="path">Path to value in key1.key2.keyN format.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:GraphQL.Resolvers.AsyncFieldResolver`1">
            <summary>
            When resolving a field, this implementation calls a predefined <see cref="T:System.Func`2"/> and returns the result.
            The returned value must be of an <see cref="T:System.Threading.Tasks.Task`1"/> type.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.AsyncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance which executes the specified delegate.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.AsyncFieldResolver`1.Resolve(GraphQL.IResolveFieldContext)">
            <summary>
            Asynchronously returns an object or null for the specified field.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.AsyncFieldResolver`2">
            <summary>
            <inheritdoc cref="T:GraphQL.Resolvers.AsyncFieldResolver`1"/>
            <br/><br/>
            This implementation provides a typed <see cref="T:GraphQL.IResolveFieldContext`1"/> to the resolver function.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.AsyncFieldResolver`2.#ctor(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{`1}})">
            <inheritdoc cref="M:GraphQL.Resolvers.AsyncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.Task{`0}})"/>
        </member>
        <member name="M:GraphQL.Resolvers.AsyncFieldResolver`2.Resolve(GraphQL.IResolveFieldContext)">
            <inheritdoc cref="M:GraphQL.Resolvers.AsyncFieldResolver`1.Resolve(GraphQL.IResolveFieldContext)"/>
        </member>
        <member name="T:GraphQL.Resolvers.DelegateFieldModelBinderResolver">
            <summary>
            An implementation of <see cref="T:GraphQL.Resolvers.IFieldResolver"/> that executes a specified delegate by late-binding
            method arguments such as <see cref="T:GraphQL.IResolveFieldContext"/>, the source, the user context, or field arguments.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.DelegateFieldModelBinderResolver.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance with the specified delegate.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.DelegateFieldModelBinderResolver.Resolve(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.ExpressionFieldResolver`2">
            <summary>
            Returns a value from the field's graph type's source object, based on a predefined expression.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.ExpressionFieldResolver`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance that runs the specified expression when resolving a field.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:GraphQL.Resolvers.ExpressionFieldResolver`2.Resolve(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.FieldResolverExtensions">
            <summary>
            Extension methods for <see cref="T:GraphQL.Resolvers.IFieldResolver"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.FieldResolverExtensions.ResolveAsync(GraphQL.Resolvers.IFieldResolver,GraphQL.IResolveFieldContext)">
            <summary>
            Executes a field resolver with a specified <see cref="T:GraphQL.IResolveFieldContext"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.FuncFieldResolver`1">
            <summary>
            When resolving a field, this implementation calls a predefined <see cref="T:System.Func`2"/> and returns the result
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,`0})">
            <summary>
            Initializes a new instance that runs the specified delegate when resolving a field.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`1.Resolve(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.FuncFieldResolver`2">
            <summary>
            <inheritdoc cref="T:GraphQL.Resolvers.FuncFieldResolver`1"/>
            <br/><br/>
            This implementation provides a typed <see cref="T:GraphQL.IResolveFieldContext`1"/> to the resolver function.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`2.#ctor(System.Func{GraphQL.IResolveFieldContext{`0},`1})">
            <inheritdoc cref="M:GraphQL.Resolvers.FuncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,`0})"/>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`2.Resolve(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.IFieldResolver">
            <summary>
            <para>
            A field resolver returns an object for a given field within a graph.
            </para><para>
            The <see cref="P:GraphQL.Types.FieldType.Resolver"/> property defines the field resolver to be used for the field.
            </para><para>
            Typically an instance of <see cref="T:GraphQL.Resolvers.FuncFieldResolver`2">FuncFieldResolver</see> or
            <see cref="T:GraphQL.Resolvers.AsyncFieldResolver`2">AsyncFieldResolver</see> is created when code needs
            to execute within the field resolver - typically by calling
            <see cref="T:GraphQL.Builders.FieldBuilder`2">FieldBuilder</see>.<see cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(System.Func{GraphQL.IResolveFieldContext{`0},`1})">Resolve</see>
            or <see cref="T:GraphQL.Builders.FieldBuilder`2">FieldBuilder</see>.<see cref="M:GraphQL.Builders.FieldBuilder`2.ResolveAsync(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{`1}})">ResolveAsync</see>.
            </para><para>
            When mapping fields to source object properties via
            <see cref="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Type)">Field(x => x.Name)</see>,
            <see cref="T:GraphQL.Resolvers.ExpressionFieldResolver`2">ExpressionFieldResolver</see> is used.
            </para><para>
            When a field resolver is not defined, such as with <see cref="M:GraphQL.Types.ComplexGraphType`1.Field``2(System.String)">Field("Name")</see>,
            the static instance of <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> is used.
            </para>
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.IFieldResolver.Resolve(GraphQL.IResolveFieldContext)">
            <summary>
            Returns an object, null, or a <see cref="T:System.Threading.Tasks.Task`1"/> for the specified field. If a task is returned, then this task will be awaited to obtain the actual object.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.IFieldResolver`1">
            <inheritdoc cref="T:GraphQL.Resolvers.IFieldResolver"/>
        </member>
        <member name="M:GraphQL.Resolvers.IFieldResolver`1.Resolve(GraphQL.IResolveFieldContext)">
            <summary>
            Returns an object or null for the specified field. If <typeparamref name="T"/> is a <see cref="T:System.Threading.Tasks.Task`1"/>, then this task will be awaited to obtain the actual object.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.NameFieldResolver">
            <summary>
            <para>
            Attempts to return a value for a field from the graph's source object, matching the name of
            the field to a property or a method with the same name on the source object.
            </para><para>
            Call <see cref="P:GraphQL.Resolvers.NameFieldResolver.Instance"/> to retrieve an instance of this class.
            </para>
            </summary>
        </member>
        <member name="P:GraphQL.Resolvers.NameFieldResolver.Instance">
            <summary>
            Returns the static instance of the <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.NameFieldResolver.Resolve(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Resolvers.NameFieldResolver.CreateDelegate(System.Type,System.String)">
            <summary>
            <para>
            Dynamically creates the necessary delegate in runtime to get the property/method value of the specified type.
            </para><para>
            Example:
            </para><code>
            public class Person
            {
                public int Age { get; set; }
            }
            </code>
            <para>
            So resulting Func will be generated as <c>{x => Convert(Convert(x, Person).Age, Object)}</c><br/>
            1. First, the input parameter 'x' is converted from the object to a specific type.<br/>
            2. The required property or method is extracted from casted value.<br/>
            3. Then result is converted again to the object and returned from the method.
            </para>
            </summary>
            <param name="target"> The type from which you want to get the value. </param>
            <param name="name"> Property/method name. </param>
            <returns> Compiled delegate to get the value. </returns>
        </member>
        <member name="T:GraphQL.SchemaExtensions">
            <summary>
            Provides extension methods for schemas.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.ExecuteAsync(GraphQL.Types.ISchema,GraphQL.IDocumentWriter,System.Action{GraphQL.ExecutionOptions})">
            <summary>
            Executes a GraphQL request with the default <see cref="T:GraphQL.DocumentExecuter"/>, serializes the result using the specified <see cref="T:GraphQL.IDocumentWriter"/>, and returns the result
            </summary>
            <param name="schema">An instance of <see cref="T:GraphQL.Types.ISchema"/> to use to execute the query</param>
            <param name="documentWriter">An instance of <see cref="T:GraphQL.IDocumentExecuter"/> to use to serialize the result</param>
            <param name="configure">A delegate which configures the execution options</param>
        </member>
        <member name="T:GraphQL.StringExtensions">
            <summary>
            Provides extension methods for strings.
            </summary>
        </member>
        <member name="M:GraphQL.StringExtensions.ToFormat(System.String,System.Object[])">
            <summary>
            Equivalent to String.Format.
            </summary>
            <param name="format">The format string in String.Format style.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GraphQL.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Returns a camel case version of the string.
            </summary>
            <param name="s">The source string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GraphQL.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Returns a pascal case version of the string.
            </summary>
            <param name="s">The source string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:GraphQL.TaskExtensions">
            <summary>
            Task extensions.
            </summary>
        </member>
        <member name="M:GraphQL.TaskExtensions.GetResult(System.Threading.Tasks.Task)">
            <summary>
            Gets the result of a completed <see cref="T:System.Threading.Tasks.Task`1"/> when TResult is not known
            </summary>
            <remarks>
            The Task should already be awaited or this call will block.
            This will also throw an exception if the task is not Task&lt;TResult&gt;.
            </remarks>
            <param name="task">A task that has already been awaited</param>
            <returns></returns>
        </member>
        <member name="T:GraphQL.TypeExtensions">
            <summary>
            Provides extension methods for types.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.As``1(System.Object)">
            <summary>
            Conditionally casts the item into the indicated type using an "as" cast.
            </summary>
            <typeparam name="T">The desired type</typeparam>
            <param name="item">The item.</param>
            <returns><c>null</c> if the cast failed, otherwise item as T</returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.IsConcrete(System.Type)">
            <summary>
            Determines whether this instance is a concrete type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the specified type is neither abstract nor an interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether this instance is a subclass of Nullable&lt;T&gt;.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is a subclass of Nullable&lt;T&gt;; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.IsGraphType(System.Type)">
            <summary>
            Determines whether the indicated type implements IGraphType.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the indicated type implements IGraphType; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.GraphQLName(System.Type)">
            <summary>
            Gets the GraphQL name of the type. This is derived from the type name and can be overridden by the GraphQLMetadata Attribute.
            </summary>
            <param name="type">The indicated type.</param>
            <returns>A string containing a GraphQL compatible type name.</returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean)">
            <summary>
            Gets the graph type for the indicated type.
            </summary>
            <param name="type">The type for which a graph type is desired.</param>
            <param name="isNullable">if set to <c>false</c> if the type explicitly non-nullable.</param>
            <returns>A Type object representing a GraphType that matches the indicated type.</returns>
            <remarks>This can handle arrays, lists and other collections implementing IEnumerable.</remarks>
        </member>
        <member name="M:GraphQL.TypeExtensions.GetFriendlyName(System.Type)">
            <summary>
            Returns the friendly name of a type, using C# angle-bracket syntax for generics.
            </summary>
            <param name="type">The type of which you are inquiring.</param>
            <returns>A string representing the friendly name.</returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.GetEnumerableElementType(System.Type)">
            <summary>
            Returns the type of element for a one-dimensional container type.
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if the type cannot be identified
            as a one-dimensional container type.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.ImplementsGenericType(System.Type,System.Type)">
            <summary>
            Returns whether or not the given <paramref name="type"/> implements <paramref name="genericType"/>
            by testing itself, and then recursively up it's base types hierarchy.
            </summary>
            <param name="type">Type to test.</param>
            <param name="genericType">Type to test for.</param>
            <returns>
              <c>true</c> if the indicated type implements <paramref name="genericType"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.Description(System.Reflection.MemberInfo)">
            <summary>
            Looks for a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the specified member and returns
            the <see cref="P:System.ComponentModel.DescriptionAttribute.Description">description</see>, if any.
            Otherwise returns xml documentation on the specified member, if any.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.ObsoleteMessage(System.Reflection.MemberInfo)">
            <summary>
            Looks for a <see cref="T:System.ObsoleteAttribute"/> on the specified member and returns
            the <see cref="P:System.ObsoleteAttribute.Message">message</see>, if any.
            </summary>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringObjectGraphType`1">
            <summary>
            Allows you to automatically register the necessary fields for the specified type.
            Supports <see cref="T:System.ComponentModel.DescriptionAttribute"/>, <see cref="T:System.ObsoleteAttribute"/>, <see cref="T:System.ComponentModel.DefaultValueAttribute"/> and <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>.
            Also it can get descriptions for fields from the xml comments.
            </summary>
            <typeparam name="TSourceType"></typeparam>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.#ctor">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/> by specifying fields to exclude from registration.
            </summary>
            <param name="excludedProperties"> Expressions for excluding fields, for example 'o => o.Age'. </param>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetRegisteredProperties">
            <summary>
            Returns a list of properties that should have fields created for them.
            </summary>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1">
            <summary>
            Allows you to automatically register the necessary fields for the specified input type.
            Supports <see cref="T:System.ComponentModel.DescriptionAttribute"/>, <see cref="T:System.ObsoleteAttribute"/>, <see cref="T:System.ComponentModel.DefaultValueAttribute"/> and <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>.
            Also it can get descriptions for fields from the xml comments.
            Note that now __InputValue has no isDeprecated and deprecationReason fields but in the future they may appear - https://github.com/graphql/graphql-spec/pull/525
            </summary>
            <typeparam name="TSourceType"></typeparam>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.#ctor">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/> by specifying fields to exclude from registration.
            </summary>
            <param name="excludedProperties"> Expressions for excluding fields, for example 'o => o.Age'. </param>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.GetRegisteredProperties">
            <summary>
            Returns a list of properties that should have fields created for them.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IComplexGraphType">
            <summary>
            Represents an interface for all complex (that is, having their own properties) input and output graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IComplexGraphType.Fields">
            <summary>
            Returns a list of the fields configured for this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IComplexGraphType.AddField(GraphQL.Types.FieldType)">
            <summary>
            Adds a field to this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IComplexGraphType.HasField(System.String)">
            <summary>
            Returns <see langword="true"/> when a field matching the specified name is configured for this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IComplexGraphType.GetField(System.String)">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> for the field matching the specified name that
            is configured for this graph type, or <see langword="null"/> if none is found.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ComplexGraphType`1">
            <summary>
            Represents a default base class for all complex (that is, having their own properties) input and output graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.ComplexGraphType`1.Fields">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.HasField(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.GetField(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.AddField(GraphQL.Types.FieldType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field(System.Type,System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Object},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <param name="type">The .NET type of the graph type of this field.</param>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Object},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldDelegate``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Delegate,System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldAsync(System.Type,System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{System.Object}},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <param name="type">The .NET type of the graph type of this field.</param>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldAsync``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{System.Object}},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldAsync``2(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{``1}},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <typeparam name="TReturnType">The type of the return value of the field resolver delegate.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``2(System.String)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field.
            </summary>
            <typeparam name="TGraphType">The graph type of the field.</typeparam>
            <typeparam name="TReturnType">The return type of the field resolver.</typeparam>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field.
            </summary>
            <typeparam name="TGraphType">The graph type of the field.</typeparam>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Type)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field that is linked to a property of the source object.
            </summary>
            <typeparam name="TProperty">The return type of the field.</typeparam>
            <param name="name">The name of this field.</param>
            <param name="expression">The property of the source object represented within an expression.</param>
            <param name="nullable">Indicates if this field should be nullable or not. Ignored when <paramref name="type"/> is specified.</param>
            <param name="type">The graph type of the field; inferred via <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> if null.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Type)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field that is linked to a property of the source object.
            The default name of this field is inferred by the property represented within the expression.
            </summary>
            <typeparam name="TProperty">The return type of the field.</typeparam>
            <param name="expression">The property of the source object represented within an expression.</param>
            <param name="nullable">Indicates if this field should be nullable or not. Ignored when <paramref name="type"/> is specified.</param>
            <param name="type">The graph type of the field; inferred via <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> if null.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Connection``1">
            <inheritdoc cref="M:GraphQL.Builders.ConnectionBuilder`1.Create``1(System.String)"/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Connection``2">
            <inheritdoc cref="M:GraphQL.Builders.ConnectionBuilder`1.Create``2(System.String)"/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Connection``3">
            <inheritdoc cref="M:GraphQL.Builders.ConnectionBuilder`1.Create``3(System.String)"/>
        </member>
        <member name="T:GraphQL.Types.IAbstractGraphType">
            <summary>
            An interface for such graph types that do not represent concrete graph types, that is, for interfaces and unions. 
            </summary>
        </member>
        <member name="T:GraphQL.Types.IInputObjectGraphType">
            <summary>
            Represents an input object graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.InputObjectGraphType">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.InputObjectGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.IInputObjectGraphType"/>
        </member>
        <member name="T:GraphQL.Types.IInterfaceGraphType">
            <summary>
            Represents a GraphQL interface graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.InterfaceGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.InterfaceGraphType"/>
        </member>
        <member name="P:GraphQL.Types.InterfaceGraphType`1.PossibleTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.InterfaceGraphType`1.ResolveType">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.InterfaceGraphType`1.AddPossibleType(GraphQL.Types.IObjectGraphType)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.InterfaceGraphType">
            <inheritdoc cref="T:GraphQL.Types.IInterfaceGraphType"/>
        </member>
        <member name="T:GraphQL.Types.ListGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.ListGraphType"/>
        </member>
        <member name="M:GraphQL.Types.ListGraphType`1.#ctor">
            <inheritdoc cref="M:GraphQL.Types.ListGraphType.#ctor(System.Type)"/>
        </member>
        <member name="T:GraphQL.Types.ListGraphType">
            <summary>
            Represents a list of objects. A GraphQL schema may describe that a field represents a list of another type.
            The List type is provided for this reason, and wraps another type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ListGraphType.#ctor(GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance for the specified inner graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ListGraphType.#ctor(System.Type)">
            <inheritdoc cref="M:GraphQL.Types.ListGraphType.#ctor(GraphQL.Types.IGraphType)"/>
        </member>
        <member name="P:GraphQL.Types.ListGraphType.Type">
            <summary>
            Returns the .NET type of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ListGraphType.ResolvedType">
            <summary>
            Gets or sets the instance of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ListGraphType.CollectTypes(GraphQL.Types.TypeCollectionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ListGraphType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.NonNullGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.NonNullGraphType"/>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType`1.#ctor">
            <inheritdoc cref="M:GraphQL.Types.NonNullGraphType.#ctor(System.Type)"/>
        </member>
        <member name="T:GraphQL.Types.NonNullGraphType">
            <summary>
            Represents a graph type that, for output graphs, is never null, or for input graphs, is not optional.
            In other words the NonNull type wraps another type, and denotes that the resulting value will never be null.
            </summary>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType.#ctor(GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance for the specified inner graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType.#ctor(System.Type)">
            <inheritdoc cref="M:GraphQL.Types.NonNullGraphType.#ctor(GraphQL.Types.IGraphType)"/>
        </member>
        <member name="P:GraphQL.Types.NonNullGraphType.Type">
            <summary>
            Returns the .NET type of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.NonNullGraphType.ResolvedType">
            <summary>
            Gets or sets the instance of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType.CollectTypes(GraphQL.Types.TypeCollectionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.IObjectGraphType">
            <summary>
            Represents an interface for all object (that is, having their own properties) output graph types.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ObjectGraphType`1">
            <summary>
            Represents a default base class for all object (that is, having their own properties) output graph types.
            </summary>
            <typeparam name="TSourceType">Typically the type of the object that this graph represents. More specifically, the .NET type of the source property within field resolvers for this graph.</typeparam>
        </member>
        <member name="P:GraphQL.Types.ObjectGraphType`1.IsTypeOf">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.AddResolvedInterface(GraphQL.Types.IInterfaceGraphType)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.ObjectGraphType`1.ResolvedInterfaces">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.ObjectGraphType`1.Interfaces">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.Interface``1">
            <summary>
            Adds a GraphQL interface graph type to the list of GraphQL interfaces implemented by this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.Interface(System.Type)">
            <inheritdoc cref="M:GraphQL.Types.ObjectGraphType`1.Interface``1"/>
        </member>
        <member name="T:GraphQL.Types.ObjectGraphType">
            <summary>
            Represents a default base class for all object (that is, having their own properties) output graph types.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ObjectGraphTypeExtensions">
            <summary>
            Provides methods to add fields to output graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphTypeExtensions.Field(GraphQL.Types.IObjectGraphType,System.String,GraphQL.Types.IGraphType,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext,System.Object})">
            <summary>
            Adds a field with the specified properties to a specified output graph type.
            </summary>
            <param name="obj">The graph type to add a field to.</param>
            <param name="name">The name of the field.</param>
            <param name="type">The graph type of this field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphTypeExtensions.FieldAsync(GraphQL.Types.IObjectGraphType,System.String,GraphQL.Types.IGraphType,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Adds a field with the specified properties to a specified output graph type.
            </summary>
            <param name="obj">The graph type to add a field to.</param>
            <param name="name">The name of the field.</param>
            <param name="type">The graph type of this field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
        </member>
        <member name="T:GraphQL.Types.UnionGraphType">
            <summary>
            Represents a GraphQL union graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.UnionGraphType.PossibleTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.UnionGraphType.ResolveType">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UnionGraphType.AddPossibleType(GraphQL.Types.IObjectGraphType)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.UnionGraphType.Types">
            <summary>
            Gets or sets a list of graph types that this union represents.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UnionGraphType.Type``1">
            <summary>
            Adds a graph type to the list of graph types that this union represents.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UnionGraphType.Type(System.Type)">
            <inheritdoc cref="M:GraphQL.Types.UnionGraphType.Type``1"/>
        </member>
        <member name="T:GraphQL.Types.DirectiveLocation">
            <summary>
            Directives must only be used in the locations they are declared to belong in.
            https://graphql.github.io/graphql-spec/June2018/#sec-Type-System.Directives
            </summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Query">
            <summary>Location adjacent to a query operation.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Mutation">
            <summary>Location adjacent to a mutation operation.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Subscription">
            <summary>Location adjacent to a subscription operation.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Field">
            <summary>Location adjacent to a field.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.FragmentDefinition">
            <summary>Location adjacent to a fragment definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.FragmentSpread">
            <summary>Location adjacent to a fragment spread.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.InlineFragment">
            <summary>Location adjacent to an inline fragment.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Schema">
            <summary>Location adjacent to a schema definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Scalar">
            <summary>Location adjacent to a scalar definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Object">
            <summary>Location adjacent to an object type definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.FieldDefinition">
            <summary>Location adjacent to a field definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.ArgumentDefinition">
            <summary>Location adjacent to an argument definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Interface">
            <summary>Location adjacent to an interface definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Union">
            <summary>Location adjacent to a union definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.Enum">
            <summary>Location adjacent to an enum definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.EnumValue">
            <summary>Location adjacent to an enum value definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.InputObject">
            <summary>Location adjacent to an input object type definition.</summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveLocation.InputFieldDefinition">
            <summary>Location adjacent to an input object field definition.</summary>
        </member>
        <member name="T:GraphQL.Types.DirectiveGraphType">
            <summary>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators will usually not create these directly.
            </summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveGraphType.Include">
            <summary>
            Returns a static instance of the predefined 'include' directive.
            </summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveGraphType.Skip">
            <summary>
            Returns a static instance of the predefined 'skip' directive.
            </summary>
        </member>
        <member name="F:GraphQL.Types.DirectiveGraphType.Deprecated">
            <summary>
            Returns a static instance of the predefined 'deprecated' directive.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DirectiveGraphType.#ctor(System.String,System.Collections.Generic.IEnumerable{GraphQL.Types.DirectiveLocation})">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="name">The directive name within the GraphQL schema.</param>
            <param name="locations">A list of locations where the directive can be applied.</param>
        </member>
        <member name="P:GraphQL.Types.DirectiveGraphType.Name">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.DirectiveGraphType.Description">
            <summary>
            Gets or sets the description of the directive.
            </summary>
        </member>
        <member name="P:GraphQL.Types.DirectiveGraphType.Arguments">
            <summary>
            Gets or sets a list of arguments for the directive.
            </summary>
        </member>
        <member name="P:GraphQL.Types.DirectiveGraphType.Locations">
            <summary>
            Returns a list of locations where the directive can be applied.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IncludeDirective">
            <summary>
            Used to conditionally include fields or fragments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IncludeDirective.#ctor">
            <summary>
            Initializes a new instance of the 'include' directive.
            </summary>
        </member>
        <member name="T:GraphQL.Types.SkipDirective">
            <summary>
            Used to conditionally skip (exclude) fields or fragments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SkipDirective.#ctor">
            <summary>
            Initializes a new instance of the 'skip' directive.
            </summary>
        </member>
        <member name="T:GraphQL.Types.GraphQLDeprecatedDirective">
            <summary>
            Used to declare element of a GraphQL schema as deprecated.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphQLDeprecatedDirective.#ctor">
            <summary>
            Initializes a new instance of the 'deprecated' directive.
            </summary>
        </member>
        <member name="T:GraphQL.Types.FieldType">
            <summary>
            Represents a field of a graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.Name">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.Description">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.DeprecationReason">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.DefaultValue">
            <summary>
            Gets or sets the default value of the field. Only applies to fields of input object graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.Type">
            <summary>
            Gets or sets the graph type of this field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.ResolvedType">
            <summary>
            Gets or sets the graph type of this field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.Arguments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.Resolver">
            <summary>
            Gets or sets a field resolver for the field. Only applicable to fields of output graph types.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IFieldType">
            <summary>
            Represents a field of a graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IFieldType.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IFieldType.Description">
            <summary>
            Gets or sets the description of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IFieldType.DeprecationReason">
            <summary>
            Gets or sets the deprecation reason of the field. Only applicable to fields of output graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IFieldType.Arguments">
            <summary>
            Gets or sets a list of arguments for the field.
            </summary>
        </member>
        <member name="T:GraphQL.Types.GraphQLTypeReference">
            <summary>
            Represents a placeholder for another GraphQL type, referenced by name. Must be replaced with a
            reference to the actual GraphQL type before using the reference.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.#ctor(System.String)">
            <summary>
            Initializes a new instance for the specified GraphQL type name.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.TypeName">
            <summary>
            Returns the GraphQL type name that this reference is a placeholder for.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.IsTypeOf">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.AddResolvedInterface(GraphQL.Types.IInterfaceGraphType)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.Interfaces">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.ResolvedInterfaces">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Types.GraphType">
            <summary>
            Represents a graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphType.#ctor">
            <summary>
            Initializes a new instance of the graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphType.Name">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphType.Description">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphType.DeprecationReason">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphType.CollectTypes(GraphQL.Types.TypeCollectionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphType.ToString">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Types.GraphType.Equals(GraphQL.Types.IGraphType)">
            <summary>
            Determines if the name of the specified graph type is equal to the name of this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphType.Equals(System.Object)">
            <summary>
            Determines if the graph type is equal to the specified object, or if the name of the specified graph type
            is equal to the name of this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Types.TypeCollectionContext">
            <summary>
            Provides a mechanism to resolve graph type instances from their .NET types,
            and also to register new graph type instances with their name in the graph type lookup table.
            (See <see cref="T:GraphQL.Types.GraphTypesLookup"/>.)
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeCollectionContext.#ctor(System.Func{System.Type,GraphQL.Types.IGraphType},System.Action{System.String,GraphQL.Types.IGraphType,GraphQL.Types.TypeCollectionContext})">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="resolver">A delegate which returns an instance of a graph type from its .NET type.</param>
            <param name="addType">A delegate which adds a graph type instance to the list of named graph types for the schema.</param>
        </member>
        <member name="P:GraphQL.Types.TypeCollectionContext.ResolveType">
            <summary>
            Returns a delegate which returns an instance of a graph type from its .NET type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeCollectionContext.AddType">
            <summary>
            Returns a delegate which adds a graph type instance to the list of named graph types for the schema.
            </summary>
        </member>
        <member name="T:GraphQL.Types.GraphTypesLookup">
            <summary>
            Provides lookup for all schema types and has algorithms for discovering them.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.#ctor">
            <summary>
            Initializes a new instance with the <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.#ctor(GraphQL.Conversion.INameConverter)">
            <summary>
            Initalizes a new instance with the specified <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.Create(System.Collections.Generic.IEnumerable{GraphQL.Types.IGraphType},System.Collections.Generic.IEnumerable{GraphQL.Types.DirectiveGraphType},System.Func{System.Type,GraphQL.Types.IGraphType},GraphQL.Conversion.INameConverter,System.Boolean)">
            <summary>
            Initializes a new instance for the specified graph types and directives, and with the specified type resolver and name converter.
            </summary>
            <param name="types">A list of graph type instances to register in the lookup table.</param>
            <param name="directives">A list of directives to register.</param>
            <param name="resolveType">A delegate which returns an instance of a graph type from its .NET type.</param>
            <param name="nameConverter">A name converter to use for the specified graph types.</param>
            <param name="seal">Prevents additional types from being added to the lookup table.</param>
        </member>
        <member name="P:GraphQL.Types.GraphTypesLookup.NameConverter">
            <summary>
            Gets or sets the name converter used when adding types to the lookup table.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.Clear">
            <summary>
            Removes all discovered types from lookup. 
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.All">
            <summary>
            Returns a list of all of the discovered types from the lookup table.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphTypesLookup.Item(System.String)">
            <summary>
            Returns a graph type instance from the lookup table by its GraphQL type name.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphTypesLookup.Item(System.Type)">
            <summary>
            Returns a graph type instance from the lookup table by its .NET type.
            </summary>
            <param name="type">The .NET type of the graph type.</param>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.AddType``1">
            <summary>
            Adds the specified graph type to the lookup table.
            </summary>
            <typeparam name="TType">The graph type to add.</typeparam>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.AddType``1(GraphQL.Types.TypeCollectionContext)">
            <summary>
            Adds the specified graph type to the lookup table using a specified <see cref="T:GraphQL.Types.TypeCollectionContext"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphTypesLookup.AddType(GraphQL.Types.IGraphType,GraphQL.Types.TypeCollectionContext)">
            <summary>
            Adds the specified graph type instance to the lookup table using a specified <see cref="T:GraphQL.Types.TypeCollectionContext"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphTypesLookup.SchemaMetaFieldType">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> instance for the <c>__schema</c> meta-field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphTypesLookup.TypeMetaFieldType">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> instance for the <c>__type</c> meta-field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphTypesLookup.TypeNameMetaFieldType">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> instance for the <c>__typename</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Types.INamedType">
            <summary>
            A type that has a name within the GraphQL schema.
            </summary>
        </member>
        <member name="P:GraphQL.Types.INamedType.Name">
            <summary>
            Gets or sets a type name within the GraphQL schema.
            Type names are case sensitive and consist of alphanumeric characters and underscores only. Type names cannot start with a digit.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IGraphType">
            <summary>
            Represents a graph type within the GraphQL schema.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IGraphType.Description">
            <summary>
            Gets or sets the description of the graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IGraphType.DeprecationReason">
            <summary>
            Gets or sets the deprecation reason of the graph.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IHaveDefaultValue">
            <summary>
            Provides a default value for arguments of fields or input object graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IHaveDefaultValue.DefaultValue">
            <summary>
            Returns the default value of this argument or field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IHaveDefaultValue.Type">
            <summary>
            Returns the graph type of this argument or field.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IImplementInterfaces">
            <summary>
            Provides properties for enumerating supported GraphQL interface types for an output graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IImplementInterfaces.Interfaces">
            <summary>
            Gets or sets a list of .NET types of supported GraphQL interface types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IImplementInterfaces.ResolvedInterfaces">
            <summary>
            Gets or sets a list of instances of supported GraphQL interface types.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IProvideMetadata">
            <summary>
            Provides basic capabilities for getting and setting arbitrary meta information.
            This interface is implemented by numerous descendants like <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IProvideMetadata.Metadata">
            <summary>
            Provides all meta information as a key-value dictionary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IProvideMetadata.GetMetadata``1(System.String,``0)">
            <summary>
            Gets a value by a given key. If there is no value for the given key, returns <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="TType"> Type of the value. </typeparam>
            <param name="key"> String key. </param>
            <param name="defaultValue"> It is used if there is no value for the given key. </param>
            <returns> Value of the specified type. </returns>
        </member>
        <member name="M:GraphQL.Types.IProvideMetadata.GetMetadata``1(System.String,System.Func{``0})">
            <summary>
            Gets a value by a given key. If there is no value for the given key, returns value obtained from <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="TType"> Type of the value. </typeparam>
            <param name="key"> String key. </param>
            <param name="defaultValueFactory"> It is used if there is no value for the given key. </param>
            <returns> Value of the specified type. </returns>
        </member>
        <member name="M:GraphQL.Types.IProvideMetadata.HasMetadata(System.String)">
            <summary>
            Indicates whether there is meta information with the given key.
            </summary>
            <param name="key"> String key. </param>
            <returns> <c>true</c> if value for such key exists, otherwise <c>false</c>. </returns>
        </member>
        <member name="T:GraphQL.Types.IProvideResolvedType">
            <summary>
            Provides properties for returning the graph type for the argument or field. Also used for <see cref="T:GraphQL.Types.ListGraphType"/> and <see cref="T:GraphQL.Types.NonNullGraphType"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IProvideResolvedType.ResolvedType">
            <summary>
            Returns the graph type of this argument or field.
            In case of <see cref="T:GraphQL.Types.ListGraphType"/> or <see cref="T:GraphQL.Types.NonNullGraphType"/>, returns an instance of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ISchema">
            <summary>
            The schema for the GraphQL request. Contains references to the 'query', 'mutation', and 'subscription' base graph types.
            <br/><br/>
            Also allows for adding custom directives, additional graph types, and custom value converters.
            <br/><br/>
            <see cref="T:GraphQL.Types.Schema"/> only requires the <see cref="P:GraphQL.Types.Schema.Query">Query</see> property to be set; although commonly the <see cref="P:GraphQL.Types.Schema.Mutation">Mutation</see> and/or <see cref="P:GraphQL.Types.Schema.Subscription">Subscription</see> properties are also set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Initialized">
            <summary>
            Returns true once the schema has been initialized.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.Initialize">
            <summary>
            Initializes the schema. Called by <see cref="T:GraphQL.IDocumentExecuter"/> before validating or executing the request.
            <br/><br/>
            Note that middleware cannot be applied once the schema has been initialized. See <see cref="P:GraphQL.ExecutionOptions.FieldMiddleware"/>.
            <br/><br/>
            This method should be safe to be called from multiple threads simultaneously. However, field middleware
            must be applied in a thread-safe manner so that it is not applied to the schema multiple times.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.NameConverter">
            <summary>
            The <see cref="T:GraphQL.Conversion.INameConverter"/> used by the schema. This is set by <see cref="T:GraphQL.IDocumentExecuter"/> to the converter passed to it within <see cref="P:GraphQL.ExecutionOptions.NameConverter"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Description">
            <summary>
            Description of the schema.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Query">
            <summary>
            The 'query' base graph type; required.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Mutation">
            <summary>
            The 'mutation' base graph type; optional.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Subscription">
            <summary>
            The 'subscription' base graph type; optional.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Directives">
            <summary>
            Returns a list of directives supported by the schema.
            <br/><br/>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators do not usually create them directly.
            <br/><br/>
            <see cref="T:GraphQL.Types.Schema"/> initializes the list to include <see cref="F:GraphQL.Types.DirectiveGraphType.Include"/>, <see cref="F:GraphQL.Types.DirectiveGraphType.Skip"/> and <see cref="F:GraphQL.Types.DirectiveGraphType.Deprecated"/> by default.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.AllTypes">
            <summary>
            Returns a list of all the graph types utilized by this schema.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.FindType(System.String)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.IGraphType"/> for a given name.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.FindDirective(System.String)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.DirectiveGraphType"/> for a given name.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.AdditionalTypes">
            <summary>
            A list of additional graph types manually added to the schema by RegisterType call.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterType(GraphQL.Types.IGraphType)">
            <summary>
            Add a specific instance of an <see cref="T:GraphQL.Types.IGraphType"/> to the schema.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>, <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs,
            creating instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterTypes(GraphQL.Types.IGraphType[])">
            <summary>
            Add specific instances of <see cref="T:GraphQL.Types.IGraphType"/>s to the schema.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>, <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs,
            creating instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterTypes(System.Type[])">
            <summary>
            Add specific graph types to the schema. Each type must implement <see cref="T:GraphQL.Types.IGraphType"/>.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>, <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs,
            creating instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterType``1">
            <summary>
            Add a specific graph type to the schema.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>, <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs,
            creating instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterDirective(GraphQL.Types.DirectiveGraphType)">
            <summary>
            Add a specific directive to the schema.
            <br/><br/>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators do not usually create them directly.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterDirectives(GraphQL.Types.DirectiveGraphType[])">
            <summary>
            Add specific directives to the schema.
            <br/><br/>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators do not usually create them directly.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterValueConverter(GraphQL.Types.IAstFromValueConverter)">
            <summary>
            Register a custom value converter to the schema.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.FindValueConverter(System.Object,GraphQL.Types.IGraphType)">
            <summary>
            Search the schema for a <see cref="T:GraphQL.Types.IAstFromValueConverter"/> that matches the provided object and graph type, and return the converter.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Filter">
            <summary>
            Provides the ability to filter the schema upon introspection to hide types. This is set by <see cref="T:GraphQL.IDocumentExecuter"/>
            to the filter passed to it within <see cref="P:GraphQL.ExecutionOptions.SchemaFilter"/>. By default, no types are hidden.
            Note that this filter in fact does not prohibit the execution of queries that contain hidden types. To limit
            access to the particular fields, you should use some authorization logic.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.SchemaMetaFieldType">
            <summary>
            Returns a reference to the __schema introspection field available on the query graph type
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.TypeMetaFieldType">
            <summary>
            Returns a reference to the __type introspection field available on the query graph type
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.TypeNameMetaFieldType">
            <summary>
            Returns a reference to the __typename introspection field available on any object, interface, or union graph type
            </summary>
        </member>
        <member name="T:GraphQL.Types.QueryArgument`1">
            <summary>
            Represents an argument to a field or directive.
            </summary>
            <typeparam name="TType">The graph type of the argument.</typeparam>
        </member>
        <member name="M:GraphQL.Types.QueryArgument`1.#ctor">
            <summary>
            Initializes a new instance of the argument.
            </summary>
        </member>
        <member name="T:GraphQL.Types.QueryArgument">
            <summary>
            Represents an argument to a field or directive.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArgument.#ctor(GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance of the argument.
            </summary>
            <param name="type">The graph type of the argument.</param>
        </member>
        <member name="M:GraphQL.Types.QueryArgument.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the argument.
            </summary>
            <param name="type">The graph type of the argument.</param>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.Name">
            <summary>
            Gets or sets the name of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.Description">
            <summary>
            Gets or sets the description of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.DefaultValue">
            <summary>
            Gets or sets the default value of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.ResolvedType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.Type">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.QueryArguments">
            <summary>
            Represents a list of arguments to a field or directive.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.#ctor(GraphQL.Types.QueryArgument[])">
            <summary>
            Initializes a new instance containing the specified arguments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.#ctor(System.Collections.Generic.IEnumerable{GraphQL.Types.QueryArgument})">
            <summary>
            Initializes a new instance containing the specified arguments.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArguments.Item(System.Int32)">
            <summary>
            Gets or sets the argument at the specified index.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArguments.Count">
            <summary>
            Returns the number of arguments in the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.Add(GraphQL.Types.QueryArgument)">
            <summary>
            Adds an argument to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.Find(System.String)">
            <summary>
            Finds an argument by its name from the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Relay.ConnectionType`2">
            <summary>
            A connection graph type for the specified node graph type. The GraphQL type name
            defaults to {NodeType}Connection where {NodeType} is the GraphQL type name of
            the node graph type. This graph type assumes that the source (the result of
            the parent field's resolver) is <see cref="T:GraphQL.Types.Relay.ConnectionType`2"/>
            or <see cref="T:GraphQL.Types.Relay.ConnectionType`1"/> or has the same members.
            </summary>
            <typeparam name="TNodeType">The graph type of the result data set's data type.</typeparam>
            <typeparam name="TEdgeType">The edge graph type of node, typically <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>.</typeparam>
        </member>
        <member name="M:GraphQL.Types.Relay.ConnectionType`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Relay.ConnectionType`1">
            <summary>
            A connection graph type for the specified node type. The GraphQL type name
            defaults to {NodeType}Connection where {NodeType} is the GraphQL type name of
            the node graph type. The edge graph type used is <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>.
            </summary>
            <typeparam name="TNodeType">The graph type of the result data set's data type.</typeparam>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.Connection`2">
            <summary>
            Represents a connection result containing nodes and pagination information.
            </summary>
            <typeparam name="TNode">The data type.</typeparam>
            <typeparam name="TEdge">The edge type, typically <see cref="T:GraphQL.Types.Relay.DataObjects.Edge`1"/>.</typeparam>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.TotalCount">
            <summary>
            The total number of records available.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.PageInfo">
            <summary>
            Additional pagination information for this result data set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.Edges">
            <summary>
            The result data set, stored as a list of edges containing a node (the data) and a cursor (a unique identifier for the data).
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.Items">
            <summary>
            The result data set.
            </summary>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.Connection`1">
            <summary>
            Represents a connection result containing nodes and pagination information, with an
            edge type of <see cref="T:GraphQL.Types.Relay.DataObjects.Edge`1"/>.
            </summary>
            <typeparam name="TNode">The data type.</typeparam>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.Edge`1">
            <summary>
            Represents an edge of a connection containing a node (a row of data) and cursor (a unique identifier for the row of data).
            </summary>
            <typeparam name="TNode">The data type.</typeparam>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Edge`1.Cursor">
            <summary>
            The cursor of this edge's node. A cursor is a string representation of a unique identifier of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Edge`1.Node">
            <summary>
            The node. A node is a single row of data within the result data set.
            </summary>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.PageInfo">
            <summary>
            Contains pagination information relating to the result data set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.HasNextPage">
            <summary>
            Indicates if there are additional pages of data that can be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.HasPreviousPage">
            <summary>
            Indicates if there are prior pages of data that can be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.StartCursor">
            <summary>
            The cursor of the first node in the result data set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.EndCursor">
            <summary>
            The cursor of the last node in the result data set.
            </summary>
        </member>
        <member name="T:GraphQL.Types.Relay.EdgeType`1">
            <summary>
            An edge graph type for the specified node graph type. The GraphQL type name
            defaults to {NodeType}Edge where {NodeType} is the GraphQL type name of
            the node graph type. This graph type assumes that the source (the result of
            the parent field's resolver) is <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>
            or has the same members.
            </summary>
            <typeparam name="TNodeType">The graph type of the result data set's data type.</typeparam>
        </member>
        <member name="M:GraphQL.Types.Relay.EdgeType`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Relay.PageInfoType">
            <summary>
            A graph type that represents pagination information relating to the result data set.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Relay.PageInfoType.#ctor">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.BigIntGraphType">
            <summary>
            The BigInt scalar graph type represents a signed integer with any number of digits.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Numerics.BigInteger"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.BigIntGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BigIntGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.BooleanGraphType">
            <summary>
            The Boolean scalar graph type represents a boolean value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Boolean"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.BooleanGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BooleanGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ByteGraphType">
            <summary>
            The Byte scalar graph type represents an unsigned 8-bit integer value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Byte"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ByteGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ByteGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DateGraphType">
            <summary>
            The Date scalar graph type represents a year, month and day in accordance with the ISO-8601 standard.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.DateGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DateTimeGraphType">
            <summary>
            The DateTime scalar graph type represents a date and time in accordance with the ISO-8601 standard.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.DateTime"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.DateTimeGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateTimeGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DateTimeOffsetGraphType">
            <summary>
            The DateTimeOffset scalar graph type represents a date, time and offset from UTC.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.DateTimeOffset"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeOffsetGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.DateTimeOffsetGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeOffsetGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateTimeOffsetGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DecimalGraphType">
            <summary>
            The Decimal scalar graph type represents a decimal value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Decimal"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DecimalGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DecimalGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.EnumerationGraphType">
            <summary>
            Also called Enums, enumeration types are a special kind of scalar that is restricted to a
            particular set of allowed values. This allows you to:
            1. Validate that any arguments of this type are one of the allowed values.
            2. Communicate through the type system that a field will always be one of a finite set of values.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.EnumerationGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.AddValue(System.String,System.String,System.Object,System.String)">
            <summary>
            Adds a value to the allowed set of enumeration values.
            </summary>
            <param name="name">The name of the enumeration member, as exposed through the GraphQL endpoint (e.g. "RED").</param>
            <param name="description">A description of the enumeration member.</param>
            <param name="value">The value of the enumeration member, as referenced by the code (e.g. <see cref="F:System.ConsoleColor.Red"/>).</param>
            <param name="deprecationReason">The reason this enumeration member has been deprecated; null if this member has not been deprecated.</param>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.AddValue(GraphQL.Types.EnumValueDefinition)">
            <summary>
            Adds a value to the allowed set of enumeration values.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumerationGraphType.Values">
            <summary>
            Returns the allowed set of enumeration values.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.EnumerationGraphType`1">
            <summary>
            Allows you to automatically register the necessary enumeration members for the specified enum.
            Supports <see cref="T:System.ComponentModel.DescriptionAttribute"/> and <see cref="T:System.ObsoleteAttribute"/>.
            Also it can get descriptions for enum fields from the xml comments.
            </summary>
            <typeparam name="TEnum"> The enum to take values from. </typeparam>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.EnumerationGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType`1.ChangeEnumCase(System.String)">
            <summary>
            Changes the case of the specified enum name. By default changes it to constant case (uppercase, using underscores to separate words).
            </summary>
        </member>
        <member name="T:GraphQL.Types.EnumValues">
            <summary>
            A class that represents a set of enumeration definitions.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValues.Item(System.String)">
            <summary>
            Returns an enumeration definition for the specified name.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumValues.Add(GraphQL.Types.EnumValueDefinition)">
            <summary>
            Adds an enumeration definition to the set.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GraphQL.Types.EnumValues.FindByName(System.String,System.StringComparison)">
            <summary>
            Returns an enumeration definition for the specified name.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumValues.FindByValue(System.Object)">
            <summary>
            Returns an enumeration definition for the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumValues.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.EnumValueDefinition">
            <summary>
            A class that represents an enumeration definition.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.Name">
            <summary>
            The name of the enumeration member, as exposed through the GraphQL endpoint (e.g. "RED").
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.Description">
            <summary>
            A description of the enumeration member.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.DeprecationReason">
            <summary>
            The reason this enumeration member has been deprecated; null if this member has not been deprecated.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.Value">
            <summary>
            The value of the enumeration member, as referenced by the code (e.g. <see cref="F:System.ConsoleColor.Red"/>).
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.UnderlyingValue">
            <summary>
            When mapped to a member of an <see cref="T:System.Enum"/>, contains the underlying enumeration value; otherwise contains <see cref="P:GraphQL.Types.EnumValueDefinition.Value" />.
            </summary>
        </member>
        <member name="T:GraphQL.Types.FloatGraphType">
            <summary>
            The Float scalar graph type represents an IEEE 754 double-precision floating point value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Double"/> and <see cref="T:System.Single"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.FloatGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.FloatGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.GuidGraphType">
            <summary>
            The Guid scalar graph type represents a 128-bit globally unique identifier (GUID).
            </summary>
        </member>
        <member name="M:GraphQL.Types.GuidGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GuidGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.IdGraphType">
            <summary>
            The ID scalar graph type represents a string identifier, not intended to be human-readable. It is one of the five built-in scalars.
            When expected as an input type, any string or integer input value will be accepted as an ID.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Guid"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.IdGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.IntGraphType">
            <summary>
            The Int scalar type represents a signed 32‐bit numeric non‐fractional value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Int32"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IntGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IntGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.LongGraphType">
            <summary>
            The Long scalar graph type represents a signed 64-bit integer value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Int64"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.LongGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.LongGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.SByteGraphType">
            <summary>
            The SByte scalar graph type represents a signed 8-bit integer value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.SByte"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SByteGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.SByteGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ScalarGraphType">
            <summary>
            Scalar types represent the leaves of the query - those fields that don't have any sub-fields.
            <br/><br/>
            <see href="https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md">More info</see> about scalars.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)">
            <summary>
            Result (output) coercion. It takes the result of a resolver and converts it into an
            appropriate value for the output result. In other words it transforms a scalar from
            its server-side representation to a representation suitable for the client.
            <br/><br/>
            Since GraphQL specifies no response format, Serialize is not
            responsible for preparing the scalar for transport to the client. It is only responsible
            for generating an object which can eventually be serialized by some transport-focused API.
            </summary>
            <param name="value"> Resolved value. </param>
            <returns>
            The returned value of a the result coercion is part of the overall execution result.
            Normally this value is a primitive value like String or Integer to make it easy for
            the serialization layer. For complex types like a Date or Money Scalar this involves
            formatting the value. Returning null indicates a failed conversion.
            </returns>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <summary>
            Literal input coercion. It takes an abstract syntax tree (AST) element from a schema
            definition or query and converts it into an appropriate intenal value. In other words
            it transforms a scalar from its client-side representation as an argument to its
            server-side representation. Input coercion may not only return primitive values like
            String but rather complex ones when appropriate.
            </summary>
            <param name="value"> AST value node. </param>
            <returns> Internal scalar representation. Returning null indicates a failed conversion. </returns>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)">
            <summary>
            Value input coercion. Argument values can not only provided via GraphQL syntax inside a
            query, but also via variable. It transforms a scalar from its client-side representation
            as a variable to its server-side representation.
            <br/><br/>
            Parsing for arguments and variables are handled separately because while arguments must
            always be expressed in GraphQL query syntax, variable format is transport-specific (usually JSON).
            </summary>
            <param name="value"> Runtime object from variables. </param>
            <returns> Internal scalar representation. Returning null indicates a failed conversion. </returns>
        </member>
        <member name="T:GraphQL.Types.ShortGraphType">
            <summary>
            The Short scalar graph type represents a signed 16-bit integer value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Int16"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ShortGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ShortGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.StringGraphType">
            <summary>
            The String scalar graph type represents a string value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.String"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.StringGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.StringGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.TimeSpanMillisecondsGraphType">
            <summary>
            The Milliseconds scalar graph type represents a period of time represented as an integer value of the total number of milliseconds.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.TimeSpanMillisecondsGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.TimeSpanSecondsGraphType">
            <summary>
            The Seconds scalar graph type represents a period of time represented as an integer value of the total number of seconds.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.TimeSpan"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.TimeSpanSecondsGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.UIntGraphType">
            <summary>
            The UInt scalar graph type represents an unsigned 32-bit integer value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.UInt32"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UIntGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UIntGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ULongGraphType">
            <summary>
            The ULong scalar graph type represents an unsigned 64-bit integer value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.UInt64"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ULongGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ULongGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.UriGraphType">
            <summary>
            The Uri scalar graph type represents a string Uri specified in RFC 2396, RFC 2732, RFC 3986, and RFC 3987.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.Uri"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UriGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UriGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.UShortGraphType">
            <summary>
            The UShort scalar graph type represents an unsigned 16-bit integer value.
            By default <see cref="T:GraphQL.Utilities.GraphTypeTypeRegistry"/> maps all <see cref="T:System.UInt16"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UShortGraphType.ParseLiteral(GraphQL.Language.AST.IValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UShortGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Schema">
            <inheritdoc cref="T:GraphQL.Types.ISchema"/>
        </member>
        <member name="M:GraphQL.Types.Schema.#ctor">
            <summary>
            Create an instance of <see cref="T:GraphQL.Types.Schema"/> with the <see cref="T:GraphQL.DefaultServiceProvider"/>, which
            uses <see cref="M:System.Activator.CreateInstance(System.Type)"/> to create required objects
            </summary>
        </member>
        <member name="M:GraphQL.Types.Schema.#ctor(System.IServiceProvider)">
            <summary>
            Create an instance of <see cref="T:GraphQL.Types.Schema"/> with a specified <see cref="T:System.IServiceProvider"/>, used
            to create required objects
            </summary>
        </member>
        <member name="P:GraphQL.Types.Schema.NameConverter">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Initialized">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.Initialize">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Description">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Query">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Mutation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Subscription">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type. Schema itself acts as a service provider used to
            create objects, such as graph types, requested by the schema.
            <br/><br/>
            Note that most objects are created during schema initialization, which then have the same lifetime
            as the schema's lifetime.
            <br/><br/>
            Other types created by the service provider may include directive visitors, middlewares, validation
            rules, and name converters, among others.
            <br/><br/>
            Explicit implementation of the <see cref="M:System.IServiceProvider.GetService(System.Type)"/> method makes this method
            less visible to the calling code, which reduces the likelihood of using it as so called ServiceLocator
            anti-pattern. However, in some advanced scenarios this may be necessary.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <c>null</c> if there is no service
            object of type serviceType.
            </returns>
        </member>
        <member name="P:GraphQL.Types.Schema.Filter">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Directives">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.AllTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.AdditionalTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.TypeMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.TypeNameMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterType(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterTypes(GraphQL.Types.IGraphType[])">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterTypes(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterType``1">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterDirective(GraphQL.Types.DirectiveGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterDirectives(GraphQL.Types.DirectiveGraphType[])">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.FindDirective(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterValueConverter(GraphQL.Types.IAstFromValueConverter)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.FindValueConverter(System.Object,GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.FindType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.TypeExtensions">
            <summary>
            Provides helper methods for locating a graph type within a schema from the AST type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeExtensions.GraphTypeFromType(GraphQL.Language.AST.IType,GraphQL.Types.ISchema)">
            <summary>
            Searches a schema for a graph type specified by an AST type. If the type
            cannot be found, returns <see langword="null"/>.
            </summary>
            <param name="type">The AST type to search for.</param>
            <param name="schema">The schema to search within.</param>
        </member>
        <member name="M:GraphQL.Types.TypeExtensions.Name(GraphQL.Language.AST.IType)">
            <summary>
            Returns the name of an AST type after unwrapping any <see cref="T:GraphQL.Language.AST.NonNullType"/> or <see cref="T:GraphQL.Language.AST.ListType"/> layers.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeExtensions.FullName(GraphQL.Language.AST.IType)">
            <summary>
            Returns the formatted GraphQL type name of the AST type, using brackets and exclamation points as necessary to
            indicate lists or non-null types, respectively.
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.MetadataProvider">
            <summary>
            Default implementation of <see cref="T:GraphQL.Types.IProvideMetadata"/>. This is the base class for numerous
            descendants like <see cref="T:GraphQL.Types.GraphType"/>, <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> and others.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.MetadataProvider.Metadata">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.MetadataProvider.GetMetadata``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.MetadataProvider.GetMetadata``1(System.String,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.MetadataProvider.HasMetadata(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Utilities.NameValidator">
            <summary>
            Validator for GraphQL names.
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.NameValidator.Validation">
            <summary>
            Gets or sets current validation delegate. By default this delegate validates all names according
            to the GraphQL <see href="http://spec.graphql.org/June2018/#sec-Names">specification</see>.
            <br/>
            Setting this delegate allows you to use names not conforming to the specification, for example
            'enum-member'. Only change it when absolutely necessary.
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.NameValidator.ValidationOnSchemaInitialize">
            <summary>
            Gets or sets current validation delegate during schema initialization. By default this delegate
            validates all names according to the GraphQL <see href="http://spec.graphql.org/June2018/#sec-Names">specification</see>.
            <br/>
            Setting this delegate allows you to use names not conforming to the specification, for example
            'enum-member'. Only change it when absolutely necessary.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.NameValidator.ValidateName(System.String,System.String)">
            <summary>
            Validates a specified name.
            </summary>
            <param name="name">GraphQL name.</param>
            <param name="type">Type of element: field, type, argument, enum.</param>
        </member>
        <member name="M:GraphQL.Utilities.NameValidator.ValidateNameOnSchemaInitialize(System.String,System.String)">
            <summary>
            Validates a specified name during schema initialization.
            </summary>
            <param name="name">GraphQL name.</param>
            <param name="type">Type of element: field, type, argument, enum.</param>
        </member>
        <member name="M:GraphQL.Utilities.NameValidator.ValidateDefault(System.String,System.String)">
            <summary>
            Validates a specified name according to the GraphQL <see href="http://spec.graphql.org/June2018/#sec-Names">specification</see>.
            </summary>
            <param name="name">GraphQL name.</param>
            <param name="type">Type of element: field, type, argument, enum.</param>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.IsSchemaOfCommonNames(GraphQL.Types.ISchema)">
             GraphQL schema define root types for each type of operation. These types are
             the same as any other type and can be named in any manner, however there is
             a common naming convention:
            
               schema {
                 query: Query
                 mutation: Mutation
                 subscription: Subscription
               }
            
             When using this naming convention, the schema description can be omitted.
        </member>
        <member name="M:GraphQL.Utilities.ServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Get service of type <typeparamref name="T"/> from the <see cref="T:System.IServiceProvider"/>.
            This method has exactly the same behavior as ServiceProviderServiceExtensions.GetRequiredService.
            It is added so as not to be dependent on the Microsoft.Extensions.DependencyInjection.Abstractions package.
            https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceproviderserviceextensions.getrequiredservice
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Utilities.ServiceProviderExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Get service of type <paramref name="serviceType"/> from the <see cref="T:System.IServiceProvider"/>.
            This method has exactly the same behavior as ServiceProviderServiceExtensions.GetRequiredService.
            It is added so as not to be dependent on the Microsoft.Extensions.DependencyInjection.Abstractions package.
            https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceproviderserviceextensions.getrequiredservice
            </summary>
            <param name="provider"></param>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Utilities.StringUtils.ToWords(System.String)">
            <summary>
            Split a cased string into a series of "words" excluding the separator if applicable.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.StringUtils.QuotedOrList(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Given [ A, B, C ] return '"A", "B", or "C"'.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.StringUtils.SuggestionList(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given an invalid input string and a list of valid options, returns a filtered
            list of valid options sorted based on their similarity with the input.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.StringUtils.DamerauLevenshteinDistance(System.String,System.String,System.Int32)">
            <summary>
            Computes the Damerau-Levenshtein Distance between two strings, represented as arrays of
            integers, where each integer represents the code point of a character in the source string.
            Includes an optional threshold which can be used to indicate the maximum allowable distance.
            http://stackoverflow.com/a/9454016/279764
            </summary>
            <param name="source">An array of the code points of the first string</param>
            <param name="target">An array of the code points of the second string</param>
            <param name="threshold">Maximum allowable distance</param>
            <returns>Int.MaxValue if threshold exceeded; otherwise the Damerau-Levenshtein distance between the strings</returns>
        </member>
        <member name="T:GraphQL.Utilities.XmlDocumentationExtensions">
            <summary>
            Provides extension methods for reading XML comments from reflected members.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetMemberElementName(System.Reflection.MemberInfo)">
            <summary>
            Returns the expected name for a member element in the XML documentation file.
            </summary>
            <param name="member">The reflected member.</param>
            <returns>The name of the member element.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo,System.String)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <param name="pathToXmlFile">Path to the XML documentation file.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo,System.Xml.Linq.XDocument)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <param name="xml">XML documentation.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo,System.String)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <param name="pathToXmlFile">Path to the XML documentation file.</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo,System.Xml.Linq.XDocument)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <param name="xml">XML documentation.</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="T:GraphQL.Validation.BasicVisitor">
            <summary>
            Walks an AST node tree executing <see cref="M:GraphQL.Validation.INodeVisitor.Enter(GraphQL.Language.AST.INode)"/> and <see cref="M:GraphQL.Validation.INodeVisitor.Leave(GraphQL.Language.AST.INode)"/> methods for each node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.BasicVisitor.#ctor(GraphQL.Validation.INodeVisitor[])">
            <summary>
            Returns a new instance configured for the specified list of <see cref="T:GraphQL.Validation.INodeVisitor"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.BasicVisitor.#ctor(System.Collections.Generic.IList{GraphQL.Validation.INodeVisitor})">
            <inheritdoc cref="M:GraphQL.Validation.BasicVisitor.#ctor(GraphQL.Validation.INodeVisitor[])"/>
        </member>
        <member name="M:GraphQL.Validation.BasicVisitor.Visit(GraphQL.Language.AST.INode)">
            <summary>
            Walks the specified <see cref="T:GraphQL.Language.AST.INode"/>, executing <see cref="M:GraphQL.Validation.INodeVisitor.Enter(GraphQL.Language.AST.INode)"/> and
            <see cref="M:GraphQL.Validation.INodeVisitor.Leave(GraphQL.Language.AST.INode)"/> methods for each node.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityAnalyzer">
            <summary>
            The default complexity analyzer.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalyzer.Validate(GraphQL.Language.AST.Document,GraphQL.Validation.Complexity.ComplexityConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalyzer.Analyzed(GraphQL.Language.AST.Document,GraphQL.Validation.Complexity.ComplexityConfiguration,GraphQL.Validation.Complexity.ComplexityResult)">
            <summary>
            Executes after the complexity analysis has completed, before comparing results to the complexity configuration parameters.
            This method is made to be able to access the calculated <see cref="T:GraphQL.Validation.Complexity.ComplexityResult"/> and handle it, for example, for logging.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalyzer.Analyze(GraphQL.Language.AST.Document,System.Double,System.Int32)">
            <summary>
            Analyzes the complexity of a document.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityConfiguration">
            <summary>
            Configuration parameters for a complexity analyzer.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.MaxDepth">
            <summary>
            Gets or sets the allowed maximum depth of the query.
            <see langword="null"/> if the depth does not need to be limited.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.MaxComplexity">
            <summary>
            Gets or sets the maximum calculated document complexity factor.
            <see langword="null"/> if the complexity does not need to be limited.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.FieldImpact">
            <summary>
            Hardcoded maximum number of objects returned by each field.
            If there is no hardcoded maximum then use the average number of rows/objects returned by each field.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.MaxRecursionCount">
            <summary>
            Max number of times to traverse tree nodes. GraphiQL queries take ~95 iterations, adjust as needed.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityResult">
            <summary>
            Contains the result of a complexity analysis.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityResult.ComplexityMap">
            <summary>
            Returns a dictionary of nodes and their complexity factors.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityResult.Complexity">
            <summary>
            Returns the total calculated document complexity factor over all executed nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityResult.TotalQueryDepth">
            <summary>
            Returns the total query depth.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.IComplexityAnalyzer">
            <summary>
            Analyzes a document to determine if its complexity exceeds a threshold, throwing an exception if it is too complex.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Complexity.IComplexityAnalyzer.Validate(GraphQL.Language.AST.Document,GraphQL.Validation.Complexity.ComplexityConfiguration)">
            <exception cref="T:System.InvalidOperationException">
            Thrown if complexity is not within the defined range in parameters.
            </exception>
        </member>
        <member name="T:GraphQL.Validation.IDocumentValidator">
            <summary>
            Validates a document against a set of validation rules and returns a list of the errors found.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IDocumentValidator.ValidateAsync(System.String,GraphQL.Types.ISchema,GraphQL.Language.AST.Document,System.Collections.Generic.IEnumerable{GraphQL.Validation.IValidationRule},System.Collections.Generic.IDictionary{System.String,System.Object},GraphQL.Inputs)">
            <inheritdoc cref="T:GraphQL.Validation.IDocumentValidator"/>
        </member>
        <member name="T:GraphQL.Validation.DocumentValidator">
            <inheritdoc/>
        </member>
        <member name="F:GraphQL.Validation.DocumentValidator.CoreRules">
            <summary>
            Returns the default set of validation rules: all except <see cref="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.DocumentValidator.ValidateAsync(System.String,GraphQL.Types.ISchema,GraphQL.Language.AST.Document,System.Collections.Generic.IEnumerable{GraphQL.Validation.IValidationRule},System.Collections.Generic.IDictionary{System.String,System.Object},GraphQL.Inputs)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Validation.EnterLeaveListener">
            <summary>
            A <see cref="T:GraphQL.Validation.INodeVisitor"/> which allows for easy configuration of multiple child node listeners
            each of which only respond to the type of node that they are configured for.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.EnterLeaveListener.#ctor">
            <summary>
            Initializes a new instance with no configured listeners.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.EnterLeaveListener.#ctor(System.Action{GraphQL.Validation.EnterLeaveListener})">
            <summary>
            Initializes a new instance and runs the supplied configuration delegate.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.EnterLeaveListener.Match``1(System.Action{``0},System.Action{``0})">
            <summary>
            Configures an event listener for the specified node type.
            </summary>
            <typeparam name="TNode">The type of the AST node to listen for.</typeparam>
            <param name="enter">A delegate to execute when the node of specified type is entered.</param>
            <param name="leave">A delegate to execute when the node of specified type is left.</param>
        </member>
        <member name="T:GraphQL.Validation.Errors.ArgumentsOfCorrectTypeError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.ArgumentsOfCorrectType"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.ArgumentsOfCorrectTypeError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Argument,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.DefaultValuesOfCorrectTypeError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.DefaultValuesOfCorrectType"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.DefaultValuesOfCorrectTypeError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.VariableDefinition,GraphQL.Types.IGraphType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.FieldsOnCorrectTypeError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.FieldsOnCorrectType"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.FieldsOnCorrectTypeError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Field,GraphQL.Types.IGraphType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.FragmentsOnCompositeTypes"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.InlineFragment)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.FragmentDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownArgumentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownArgumentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownArgumentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Argument,GraphQL.Types.FieldType,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownArgumentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Argument,GraphQL.Types.DirectiveGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownDirectivesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownDirectives"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownDirectivesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Directive)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownDirectivesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Directive,GraphQL.Types.DirectiveLocation)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownFragmentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownFragmentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownFragmentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.FragmentSpread,System.String)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownTypeNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownTypeNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownTypeNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.NamedType,System.String[])">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.LoneAnonymousOperationError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.LoneAnonymousOperation"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.LoneAnonymousOperationError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Operation)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoFragmentCyclesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoFragmentCycles"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoFragmentCyclesError.#ctor(GraphQL.Validation.ValidationContext,System.String,System.String[],GraphQL.Language.AST.INode[])">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoUndefinedVariablesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoUndefinedVariables"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoUndefinedVariablesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Operation,GraphQL.Language.AST.VariableReference)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoUnusedFragmentsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoUnusedFragments"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoUnusedFragmentsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.FragmentDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoUnusedVariablesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoUnusedVariables"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoUnusedVariablesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.VariableDefinition,GraphQL.Language.AST.Operation)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.OverlappingFieldsCanBeMergedError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.OverlappingFieldsCanBeMergedError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.PossibleFragmentSpreadsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.PossibleFragmentSpreads"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.PossibleFragmentSpreadsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.InlineFragment,GraphQL.Types.IGraphType,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.PossibleFragmentSpreadsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.FragmentSpread,GraphQL.Types.IGraphType,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.ProvidedNonNullArguments"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Field,GraphQL.Types.QueryArgument)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Directive,GraphQL.Types.QueryArgument)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.ScalarLeafsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.ScalarLeafs"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.ScalarLeafsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.SelectionSet,GraphQL.Language.AST.Field,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.ScalarLeafsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Field,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.SingleRootFieldSubscriptionsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.SingleRootFieldSubscriptions"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.SingleRootFieldSubscriptionsError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Operation,GraphQL.Language.AST.ISelection[])">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueArgumentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueArgumentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueArgumentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Argument,GraphQL.Language.AST.Argument)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueDirectivesPerLocationError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueDirectivesPerLocation"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueDirectivesPerLocationError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Directive,GraphQL.Language.AST.Directive)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueFragmentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueFragmentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueFragmentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.FragmentDefinition,GraphQL.Language.AST.FragmentDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueInputFieldNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueInputFieldNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueInputFieldNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.IValue,GraphQL.Language.AST.ObjectField)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueOperationNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueOperationNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueOperationNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.Operation)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueVariableNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueVariableNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueVariableNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.VariableDefinition,GraphQL.Language.AST.VariableDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.VariablesAreInputTypesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.VariablesAreInputTypes"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.VariablesAreInputTypesError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.VariableDefinition,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.VariablesInAllowedPositionError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.VariablesInAllowedPosition"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.VariablesInAllowedPositionError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Language.AST.VariableDefinition,GraphQL.Types.IGraphType,GraphQL.Validation.VariableUsage)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.INodeVisitor">
            <summary>
            An interface to handle events raised by a node walker such as <see cref="T:GraphQL.Validation.BasicVisitor"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.INodeVisitor.Enter(GraphQL.Language.AST.INode)">
            <summary>
            Called when the node walker is entering a node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.INodeVisitor.Leave(GraphQL.Language.AST.INode)">
            <summary>
            Called when the node walker is leaving a node.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.IValidationResult">
            <summary>
            Contains a list of the validation errors found after validating a document against a set of validation rules.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.IValidationResult.IsValid">
            <summary>
            Returns <see langword="true"/> if no errors were found during the validation of a document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.IValidationResult.Errors">
            <summary>
            Returns a list of the errors found during validation of a document.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.IValidationRule">
            <summary>
            Represents a validation rule for a document.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IValidationRule.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <summary>
            Prepares and returns a node visitor to be used to validate a document (via a node walker) against this
            validation rule. Validation failures are added then by this visitor to a list stored within <see cref="P:GraphQL.Validation.ValidationContext.Errors"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.MatchingNodeVisitor`1">
            <summary>
            A node listener which runs configured delegates only when the node entered/left matches the specified node type.
            </summary>
            <typeparam name="TNode">A specified AST node type.</typeparam>
        </member>
        <member name="M:GraphQL.Validation.MatchingNodeVisitor`1.#ctor(System.Action{`0},System.Action{`0})">
            <summary>
            Returns a new instance configured with the specified enter/leave delegates.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.ArgumentsOfCorrectType">
             <summary>
             Argument values of correct type:
            
             A GraphQL document is only valid if all field argument literal values are
             of the type expected by their position.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.ArgumentsOfCorrectType.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.ArgumentsOfCorrectType.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.ArgumentsOfCorrectTypeError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.DefaultValuesOfCorrectType">
             <summary>
             Variable default values of correct type:
            
             A GraphQL document is only valid if all variable default values are of the
             type expected by their definition.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.DefaultValuesOfCorrectType.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.DefaultValuesOfCorrectType.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.DefaultValuesOfCorrectTypeError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.FieldsOnCorrectType">
             <summary>
             Fields on correct type:
            
             A GraphQL document is only valid if all fields selected are defined by the
             parent type, or are an allowed meta field such as __typename.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.FieldsOnCorrectType.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.FieldsOnCorrectType.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.FieldsOnCorrectTypeError"/>
        </member>
        <member name="M:GraphQL.Validation.Rules.FieldsOnCorrectType.GetSuggestedTypeNames(GraphQL.Types.IGraphType,System.String)">
            <summary>
            Go through all of the implementations of type, as well as the interfaces
            that they implement. If any of those types include the provided field,
            suggest them, sorted by how often the type is referenced,  starting
            with Interfaces.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.FieldsOnCorrectType.GetSuggestedFieldNames(GraphQL.Types.IGraphType,System.String)">
            <summary>
            For the field name provided, determine if there are any similar field names
            that may be the result of a typo.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.FragmentsOnCompositeTypes">
             <summary>
             Fragments on composite type:
            
             Fragments use a type condition to determine if they apply, since fragments
             can only be spread into a composite type (object, interface, or union), the
             type condition must also be a composite type.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.FragmentsOnCompositeTypes.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.FragmentsOnCompositeTypes.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownArgumentNames">
             <summary>
             Known argument names:
            
             A GraphQL field is only valid if all supplied arguments are defined by
             that field.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownArgumentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownArgumentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownArgumentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownDirectives">
             <summary>
             Known directives:
            
             A GraphQL document is only valid if all `@directives` are known by the
             schema and legally positioned.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownDirectives.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownDirectives.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownDirectivesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownFragmentNames">
             <summary>
             Known fragment names:
            
             A GraphQL document is only valid if all <c>...Fragment</c> fragment spreads refer
             to fragments defined in the same document.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownFragmentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownFragmentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownFragmentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownTypeNames">
             <summary>
             Known type names:
            
             A GraphQL document is only valid if referenced types (specifically
             variable definitions and fragment conditions) are defined by the type schema.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownTypeNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownTypeNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownTypeNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.LoneAnonymousOperation">
             <summary>
             Lone anonymous operation:
            
             A GraphQL document is only valid if when it contains an anonymous operation
             (the query short-hand) that it contains only that one operation definition.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.LoneAnonymousOperation.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.LoneAnonymousOperation.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.LoneAnonymousOperationError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoFragmentCycles">
             <summary>
             No fragment cycles:
            
             A GraphQL document is only valid if it does not contain fragment cycles.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoFragmentCycles.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoFragmentCycles.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoFragmentCyclesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoUndefinedVariables">
             <summary>
             No undefined variables:
            
             A GraphQL operation is only valid if all variables encountered, both directly
             and via fragment spreads, are defined by that operation.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoUndefinedVariables.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoUndefinedVariables.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoUndefinedVariablesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoUnusedFragments">
             <summary>
             No unused fragments:
            
             A GraphQL document is only valid if all fragment definitions are spread
             within operations, or spread within other fragments spread within operations.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoUnusedFragments.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoUnusedFragments.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoUnusedFragmentsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoUnusedVariables">
             <summary>
             No unused variables:
            
             A GraphQL operation is only valid if all variables defined by that operation
             are used in that operation or a fragment transitively included by that
             operation.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoUnusedVariables.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoUnusedVariables.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoUnusedVariablesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged">
             <summary>
             Overlapping fields are mergable:
            
             If multiple field selections with the same response names are encountered during execution,
             the field and arguments to execute and the resulting value should be unambiguous. Therefore
             any two field selections which might both be encountered for the same object are only valid
             if they are equivalent.
             <br/><br/>
             Due to the complexity of the implementation, this validation rule is not part of the default set of validation rules.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.OverlappingFieldsCanBeMergedError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict">
            <summary>
            Describes a conflict between two fields in a document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict.Reason">
            <summary>
            Returns the reason for the conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict.FieldsLeft">
            <summary>
            Returns a list of fields that are in conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict.FieldsRight">
            <summary>
            Returns a list of fields that are in conflict.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason">
            <summary>
            Describes the reason for a conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason.Name">
            <summary>
            The name of the field in conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason.Message">
            <summary>
            Returns a message descriptor describing the conflict.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message">
            <summary>
            A message descriptor describing a conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message.Msg">
            <summary>
            Returns the conflict message.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message.Msgs">
            <summary>
            Returns a list of conflict reasons that triggered this conflict.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.PossibleFragmentSpreads">
             <summary>
             Possible fragment spread:
            
             A fragment spread is only valid if the type condition could ever possibly
             be true: if there is a non-empty intersection of the possible parent types,
             and possible types which pass the type condition.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.PossibleFragmentSpreads.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.PossibleFragmentSpreads.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.PossibleFragmentSpreadsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.ProvidedNonNullArguments">
             <summary>
             Provided required arguments:
            
             A field or directive is only valid if all required (non-null) field arguments
             have been provided.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.ProvidedNonNullArguments.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.ProvidedNonNullArguments.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.ScalarLeafs">
             <summary>
             Scalar leafs:
            
             A GraphQL document is valid only if all leaf fields (fields without
             sub selections) are of scalar or enum types.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.ScalarLeafs.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.ScalarLeafs.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.ScalarLeafsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.SingleRootFieldSubscriptions">
            <summary>
            Subscription operations must have exactly one root field.
            </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.SingleRootFieldSubscriptions.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.SingleRootFieldSubscriptions.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.SingleRootFieldSubscriptionsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueArgumentNames">
             <summary>
             Unique argument names:
            
             A GraphQL field or directive is only valid if all supplied arguments at a given field
             are uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueArgumentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueArgumentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueArgumentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueDirectivesPerLocation">
             <summary>
             Unique directive names per location:
            
             A GraphQL document is only valid if all directives at a given location
             are uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueDirectivesPerLocation.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueDirectivesPerLocation.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueDirectivesPerLocationError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueFragmentNames">
             <summary>
             Unique fragment names:
            
             A GraphQL document is only valid if all defined fragments have unique names.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueFragmentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueFragmentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueFragmentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueInputFieldNames">
             <summary>
             Unique input field names:
            
             A GraphQL input object value is only valid if all supplied fields are
             uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueInputFieldNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueInputFieldNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueInputFieldNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueOperationNames">
             <summary>
             Unique operation names:
            
             A GraphQL document is only valid if all defined operations have unique names.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueOperationNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueOperationNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueOperationNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueVariableNames">
             <summary>
             Unique variable names:
            
             A GraphQL operation is only valid if all its variables are uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueVariableNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueVariableNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueVariableNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.VariablesAreInputTypes">
             <summary>
             Variables are input types:
            
             A GraphQL operation is only valid if all the variables it defines are of
             input types (scalar, enum, or input object).
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.VariablesAreInputTypes.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.VariablesAreInputTypes.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.VariablesAreInputTypesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.VariablesInAllowedPosition">
            <summary>
            Variables passed to field arguments conform to type.
            </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.VariablesInAllowedPosition.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.VariablesInAllowedPosition.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.VariablesInAllowedPositionError"/>
        </member>
        <member name="M:GraphQL.Validation.Rules.VariablesInAllowedPosition.effectiveType(GraphQL.Types.IGraphType,GraphQL.Language.AST.VariableDefinition)">
            <summary>
            if a variable definition has a default value, it is effectively non-null.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.TypeInfo">
            <summary>
            Provides information pertaining to the current state of the AST tree while being walked.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.#ctor(GraphQL.Types.ISchema)">
            <summary>
            Initializes a new instance for the specified schema.
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetAncestors">
            <summary>
            Returns a list of ancestors of the current node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetLastType">
            <summary>
            Returns the last graph type matched, or null if none.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetInputType">
            <summary>
            Returns the last input graph type matched, or null if none.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetParentType">
            <summary>
            Returns the parent graph type of the current node, or null if none.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetFieldDef">
            <summary>
            Returns the last field type matched, or null if none.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetDirective">
            <summary>
            Returns the last directive specified, or null if none.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetArgument">
            <summary>
            Returns the last query argument matched, or null if none.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.Enter(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.Leave(GraphQL.Language.AST.INode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Validation.ValidationContext">
            <summary>
            Provides contextual information about the validation of the document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.OriginalQuery">
            <summary>
            Returns the original GraphQL query string.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.OperationName">
            <summary>
            Returns the operation name requested to be executed.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Schema">
            <inheritdoc cref="P:GraphQL.Execution.ExecutionContext.Schema"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Document">
            <inheritdoc cref="P:GraphQL.Execution.ExecutionContext.Document"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Errors">
            <summary>
            Returns a list of validation errors for this document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.HasErrors">
            <summary>
            Returns <see langword="true"/> if there are any validation errors for this document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Inputs">
            <inheritdoc cref="P:GraphQL.ExecutionOptions.Inputs"/>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.ReportError(GraphQL.Validation.ValidationError)">
            <summary>
            Adds a validation error to the list of validation errors.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetVariables(GraphQL.Language.AST.IHaveSelectionSet)">
            <summary>
            For a node with a selection set, returns a list of variable references along with what input type each were referenced for.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetRecursiveVariables(GraphQL.Language.AST.Operation)">
            <summary>
            For a specified operation with a document, returns a list of variable references
            along with what input type each was referenced for.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetFragment(System.String)">
            <summary>
            Searches the document for a fragment definition by name and returns it.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetFragmentSpreads(GraphQL.Language.AST.SelectionSet)">
            <summary>
            Returns a list of fragment spreads within the specified node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetRecursivelyReferencedFragments(GraphQL.Language.AST.Operation)">
            <summary>
            For a specified operation within a document, returns a list of all fragment definitions in use.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.Print(GraphQL.Language.AST.INode)">
            <summary>
            Returns a string representation of the specified node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.Print(GraphQL.Types.IGraphType)">
            <summary>
            Returns the name of the specified graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.VariableUsage">
            <summary>
            Represents a variable reference node and the graph type it is referenced to be used for.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.VariableUsage.Node">
            <summary>
            Returns a variable reference node.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.VariableUsage.Type">
            <summary>
            Returns a graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.VariableUsage.#ctor(GraphQL.Language.AST.VariableReference,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="node">A variable reference node.</param>
            <param name="type">A graph type.</param>
        </member>
        <member name="T:GraphQL.Validation.ValidationError">
            <summary>
            Represents an error generated while validating the document.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(System.String,System.String,System.String,GraphQL.Language.AST.INode[])">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.ValidationError"/> class with a specified error message and code.
            Sets locations based on the original query and specified AST nodes that this error applies to.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(System.String,System.String,System.String,System.Exception,GraphQL.Language.AST.INode[])">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.ValidationError"/> class with a specified error message and code.
            Sets locations based on the original query and specified AST nodes that this error applies to. Sets additional
            codes based on the inner exception(s). Loads any exception data from the inner exception into this instance.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationError.Nodes">
            <summary>
            Returns a list of AST nodes that this error applies to.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationError.Number">
            <summary>
            Gets or sets the rule number of this validation error corresponding to the paragraph number from the official specification.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.ValidationResult">
            <inheritdoc cref="T:GraphQL.Validation.IValidationResult"/>
        </member>
        <member name="M:GraphQL.Validation.ValidationResult.#ctor(System.Collections.Generic.IEnumerable{GraphQL.Validation.ValidationError})">
            <summary>
            Initializes a new instance with the specified set of validation errors.
            </summary>
            <param name="errors"></param>
        </member>
        <member name="P:GraphQL.Validation.ValidationResult.IsValid">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Validation.ValidationResult.Errors">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Validation.SuccessfullyValidatedResult">
            <summary>
            A validation result that indicates no errors were found during validation of the document.
            </summary>
        </member>
        <member name="F:GraphQL.Validation.SuccessfullyValidatedResult.Instance">
            <summary>
            Returns a static instance of this class.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.SuccessfullyValidatedResult.IsValid">
            <summary>
            Returns <see langword="true"/> indicating that the document was successfully validated.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.SuccessfullyValidatedResult.Errors">
            <summary>
            Returns an empty list of execution errors.
            </summary>
        </member>
    </members>
</doc>
